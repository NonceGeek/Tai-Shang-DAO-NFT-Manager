{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/Nft.jsx","views/Home.jsx","views/Hints.jsx","views/Subgraph.jsx","views/Query.jsx","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","moonbeam","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","useBurner","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","GasGauge","parseInt","Header","link","subTitle","defaultProps","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","Item","List","Nft","nft","readContracts","writeContracts","edit","setEdit","badges","setBadges","tokenInfo","setTokenInfo","curNft","setCurNft","setLoading","parseTokenInfo","tokenInfo_","badges_","tokenInfoArr","i","badgeName","badgeCount","formatTokenInfo","getNft","Web3Dev","tokenURI","tokenId","uri","nft_","atob","getTokenInfo","image","confirmBadges","update","status","SmileOutlined","ExclamationCircleOutlined","addBadgesMenu","removeBadgesMenu","keys","Meta","owner","src","destroyOnClose","overlay","Home","totalSupply","useContractReader","nfts","setNfts","mintedNfts","tokenByIndex","ownerOf","getAllMintedNfts","tot","tasks","all","itemLayout","dataSource","renderItem","item","Subgraph","Query","setTokenId","setOwner","queryNftByTokenId","owner_","queryNftsByOwner","nfts_","balanceOf","tokenOfOwnerByIndex","evt","initialNetwork","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","Web3Provider","code","reason","faucetAvailable","connection","selectedKeys","pathname","exact","path","flex","alignItems","lte","align","gutter","prevTheme","subgraphUri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","DAI","abi","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"yQAAA,sLACO,IAAMA,EAAY,mCAMZC,EAAqB,uCAErBC,EAAc,mCAEdC,EAAW,CACtBC,UAAW,CACTC,KAAM,YACNC,MAAO,UACPC,QAAS,MACTC,cAAe,GACfC,OAAQ,WAAaC,EAAOC,OAASA,OAAOC,SAASC,SAAW,aAAe,SAEjFC,QAAS,CACPT,KAAM,UACNC,MAAO,UACPC,QAAS,EACTE,OAAO,gCAAD,OAAkCT,GACxCQ,cAAe,yBAGjBO,SAAU,CACRV,KAAM,WACNC,MAAO,UACPC,QAAS,KACTC,cAAe,gCACfC,OAAO,oCAETO,MAAO,CACLX,KAAM,QACNC,MAAO,UACPC,QAAS,GACTE,OAAO,8BAAD,OAAgCT,GACtCQ,cAAe,8BACfS,OAAQ,0CAEVC,QAAS,CACPb,KAAM,UACNC,MAAO,UACPC,QAAS,EACTE,OAAO,gCAAD,OAAkCT,GACxCiB,OAAQ,6BACRT,cAAe,iCAEjBW,QAAS,CACPd,KAAM,UACNC,MAAO,UACPC,QAAS,EACTU,OAAQ,6BACRT,cAAe,gCACfC,OAAO,gCAAD,OAAkCT,IAE1CoB,OAAQ,CACNf,KAAM,SACNC,MAAO,UACPC,QAAS,EACTU,OAAQ,kCACRT,cAAe,+BACfC,OAAO,+BAAD,OAAiCT,IAEzCqB,KAAM,CACJhB,KAAM,OACNC,MAAO,UACPC,QAAS,IACTe,MAAO,EACPC,SAAU,IACVd,OAAQ,0BACRQ,OAAQ,2BACRT,cAAe,oCAEjBgB,QAAS,CACPnB,KAAM,UACNC,MAAO,UACPC,QAAS,IACTe,MAAO,EACPC,SAAU,IACVd,OAAQ,2BACRD,cAAe,4BAEjBiB,OAAQ,CACNpB,KAAM,SACNC,MAAO,UACPC,QAAS,MACTe,MAAO,EACPC,SAAU,IACVd,OAAQ,oCACRQ,OAAQ,qCACRT,cAAe,mCAEjBkB,gBAAiB,CACfrB,KAAM,kBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,GACfC,OAAQ,WAAaC,EAAOC,OAASA,OAAOC,SAASC,SAAW,aAAe,SAEjFc,cAAe,CACbtB,KAAM,gBACNC,MAAO,UACPC,QAAS,IACTC,cAAe,GACfC,OAAQ,WAAaC,EAAOC,OAASA,OAAOC,SAASC,SAAW,aAAe,QAC/EU,SAAU,GAEZK,cAAe,CACbvB,KAAM,gBACNC,MAAO,UACPC,QAAS,GACTC,cAAe,yCACfC,OAAO,4BACPc,SAAU,GAEZM,SAAU,CACRxB,KAAM,WACNC,MAAO,UACPC,QAAS,GACTC,cAAe,mCACfC,OAAO,+BAETqB,eAAgB,CACdzB,KAAM,iBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,GACfC,OAAO,qCACPc,SAAU,OAEZQ,cAAe,CACb1B,KAAM,gBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,6CACfC,OAAO,6CACPc,SAAU,OAEZS,iBAAkB,CAChB3B,KAAM,mBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,wCACfC,OAAO,wCACPc,SAAU,OAEZU,eAAgB,CACd5B,KAAM,iBACNC,MAAO,UACPC,QAAS,QACTC,cAAe,6BACfC,OAAO,2BACPc,SAAU,KAEZW,eAAgB,CACd7B,KAAM,iBACNC,MAAO,UACPC,QAAS,QACTC,cAAe,gCACfC,OAAO,0BACPc,SAAU,KAEZY,OAAQ,CACN9B,KAAM,SACNC,MAAO,UACPC,QAAS,IACTC,cAAe,uBACfC,OAAO,gCACPc,SAAU,KAEZa,cAAe,CACb/B,KAAM,gBACNC,MAAO,UACPC,QAAS,KACTC,cAAe,+BACfC,OAAO,qCACPc,SAAU,IACVN,OAAQ,mCAICoB,EAAU,SAAA9B,GACrB,IAAK,IAAM+B,KAAKnC,EACd,GAAIA,EAASmC,GAAG/B,UAAYA,EAC1B,OAAOJ,EAASmC,M,ikBCnLdC,EAASC,IAATD,KA2BO,SAASE,EAAQC,GAC9B,IAAQC,EAAiBC,cAAjBD,aACFE,EAAUH,EAAMI,OAASJ,EAAMG,QAC/BE,EAAMC,YAAiBN,EAAMO,YAAaJ,GAC1CK,EAAWH,GAAOA,EAAII,MAAM,KAC5BC,EAAgBF,GAA8C,QAAlCA,EAASA,EAASG,OAAS,GACvDC,EARkB,SAACT,EAASrC,GAAV,gBAA+BA,GAAiB,wBAAhD,mBAAkFqC,GAQpFU,CAAkBV,EAASH,EAAMlC,eACnDgD,GAAwB,OAAPX,QAAO,IAAPA,OAAA,EAAAA,EAASY,OAAO,EAAG,IAAK,OAAxB,OAAgCZ,QAAhC,IAAgCA,OAAhC,EAAgCA,EAASY,QAAQ,IAUtE,OARIL,EACFI,EAAiBT,EACO,UAAfL,EAAMgB,KACfF,GAAkB,MAAQX,EAAQY,QAAQ,GAClB,SAAff,EAAMgB,OACfF,EAAiBX,GAGdA,EAQDH,EAAMiB,UAEN,sBAAMC,MAAO,CAAEC,cAAe,UAA9B,SACE,mBACED,MAAO,CAAEtD,MAAwB,UAAjBqC,EAA2B,UAAY,QACvDmB,OAAO,SACPC,KAAMT,EACNU,IAAI,sBAJN,SAME,cAAC,IAAD,CAAUC,KAAMpB,EAAQqB,cAAeR,KAAM,EAAGS,MAAO,QAO7D,iCACE,sBAAMP,MAAO,CAAEC,cAAe,UAA9B,SACE,cAAC,IAAD,CAAUI,KAAMpB,EAAQqB,cAAeR,KAAM,EAAGS,MAAOzB,EAAM0B,SAAW1B,EAAM0B,SAAW,EAAI,MAE/F,sBAAMR,MAAO,CAAEC,cAAe,SAAUQ,YAAa,EAAGD,SAAU1B,EAAM0B,SAAW1B,EAAM0B,SAAW,IAApG,SACG1B,EAAM4B,SACL,cAAC/B,EAAD,CAAMgC,SAAU,CAAED,SAAU5B,EAAM4B,UAAYE,SAAU,CAAEC,KAAM5B,GAAhE,SACE,mBACEe,MAAO,CAAEtD,MAAwB,UAAjBqC,EAA2B,UAAY,QACvDmB,OAAO,SACPC,KAAMT,EACNU,IAAI,sBAJN,SAMGR,MAIL,cAACjB,EAAD,CAAMiC,SAAU,CAAEC,KAAM5B,GAAxB,SACE,mBACEe,MAAO,CAAEtD,MAAwB,UAAjBqC,EAA2B,UAAY,QACvDmB,OAAO,SACPC,KAAMT,EACNU,IAAI,sBAJN,SAMGR,WA9CT,+BACE,cAAC,IAAD,CAAUkB,QAAM,EAACC,UAAW,CAAEC,KAAM,OCpD5C,IAAQC,EAAUC,EAAQ,IAAlBD,MA4BO,SAASE,EAAQrC,GAC9B,MAAoCsC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAUC,YAAW1C,EAAM2C,SAAU3C,EAAMG,SAC7CyC,EAAeC,WAAW,QAC1BC,EAAeL,EAKnB,GAH6B,qBAAlBzC,EAAMyC,UAAyBK,EAAe9C,EAAMyC,SACpC,qBAAhBzC,EAAMI,QAAuB0C,EAAe9C,EAAMI,OAEzD0C,EAAc,CAChB,IAAMC,EAAeZ,EAAMa,YAAYF,GACvCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAEpCrE,EAAQoB,EAAMpB,OAASoB,EAAMmD,kBAAoB,EAMvD,OAJIZ,IACFW,EAAiB,KAAON,EAAehE,GAAOqE,QAAQ,IAItD,sBACE/B,MAAO,CACLC,cAAe,SACfO,SAAU1B,EAAMgB,KAAOhB,EAAMgB,KAAO,GACpCoC,QAAS,EACTC,OAAQ,WAEVC,QAAS,WACPd,GAAeD,IARnB,SAWGW,I,qIC/DCK,EAAWnB,EAAQ,IAAnBmB,OAKFC,EAAY,GAIH,SAASC,EAAWC,EAAkB7E,EAAU8E,GAC7D,GAAgC,qBAArBD,EAET,8CAAO,WAAOE,EAAIC,GAAX,yCAAAC,EAAA,0DAI4C,IAA7CP,EAAOQ,OAAOC,SAASN,GAJtB,oBAKHf,EAAWe,EAAiBf,SAC5BsB,EAASP,EANN,KAOOA,EAAiBf,UAPxB,qCAO2Ce,EAAiBf,SAASuB,aAPrE,0BAOHC,EAPG,iCAQMT,EAAiBU,YARvB,wBASHzB,EAAWe,EACXO,EAASP,EAAiBW,YAVvB,UAWaX,EAAiBQ,aAX9B,QAWHC,EAXG,kBAcLG,QAAQC,IAAI,UAAWJ,GACT,KACVK,EAAS,KACbC,EAAU,CACRC,OAAQnH,IACRoH,OAAQ,WACRC,UAAWT,EAAQtG,QAEnBgH,mBAAoB,SAAAC,GACPR,QAAQC,IAAI,YAAaO,GACpC,IAAMC,EAAmBvB,EAAUsB,EAAcE,YAAYC,MAC7B,oBAArBF,GACTA,EAAiBD,EAAcE,eAKrCR,EAASU,YAAOT,GAEZU,EAAmB,GACnBhB,EAAQxG,MAAQwG,EAAQtG,QAAU,IACpCsH,EAAmBhB,EAAQxG,KAAO,KAGhCyH,EAAiB,WAAaD,EAAmB,mBAC7B,MAApBhB,EAAQtG,UACVuH,EAAiB,uCAxCd,YA6CCxB,aAAcyB,SA7Cf,wBA8CUf,QAAQC,IAAI,cAAeX,GA9CrC,UA+CcA,EA/Cd,QA+CD0B,EA/CC,sCAiDI1B,EAAG/E,WACN+E,EAAG/E,SAAWA,GAAY0E,EAAOpB,MAAMoD,WAAW,MAAO,SAEtD3B,EAAG4B,WACN5B,EAAG4B,SAAWjC,EAAOpB,MAAMsD,QAAQ,OAE1BnB,QAAQC,IAAI,aAAcX,GAvDpC,UAwDcK,EAAOyB,gBAAgB9B,GAxDrC,QAwDD0B,EAxDC,kBA0DQhB,QAAQC,IAAI,UAAWe,GAG9BzB,IACFL,EAAU8B,EAAOL,MAAQpB,KAIvBW,GAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAKmB,QAAQxB,EAAQtG,UAAY,GAlE7D,mBAmEmB2G,EAAOS,KAAKK,EAAOL,MAnEtC,EAmEOW,QACAC,GAAG,OAAO,SAAAb,GAChB,MAAO,CACLc,QAAS,kBAAM7H,OAAO8H,MAAMpC,GAAayB,GAAkBJ,EAAYC,WAtE1E,2BA0EDe,IAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAab,EAAOL,KACpBmB,UAAW,iBAITvC,EAjFH,kCAkFwBD,EAlFxB,QAkFOyC,EAlFP,OAmFOC,EAAoBC,YAAW,sBAAC,4BAAAzC,EAAA,6DACpCQ,QAAQC,IAAI,qBAAsB8B,EAAU1D,GADR,SAEIA,EAAS6D,sBAAsBH,EAASpB,MAF5C,QAE9BwB,EAF8B,SAGHA,EAA0BC,gBACzD7C,EAAS,2BAAKwC,GAAaI,IAC3BE,cAAcL,IALoB,2CAOnC,KA1FJ,WA8FwB,oBAAhBhB,EAAOsB,KA9Ff,kCA+FKtB,EAAOsB,OA/FZ,iCAkGItB,GAlGJ,mCAoGQhB,QAAQC,IAAR,MAEP2B,EACF,KAAEW,MAAQ,KAAEA,KAAKX,QACb,KAAEW,KAAKX,QACP,KAAEY,OAASC,KAAKC,MAAMD,KAAKE,UAAU,KAAEH,QAAQI,KAC/CH,KAAKC,MAAMD,KAAKC,MAAMD,KAAKE,UAAU,KAAEH,QAAQI,MAAMJ,MAAMZ,QAC3D,KAAEW,KACF,KAAEA,KACFE,KAAKE,UAAL,OACD,KAAEH,OAAS,KAAEZ,UAChBA,EAAU,KAAEA,SAGd5B,QAAQC,IAAI,uBAAwB2B,GACpC,KACMiB,EAAMJ,KAAKC,MAAMd,KACViB,EAAID,OACTE,EAAWL,KAAKC,MAAMG,EAAID,QACdE,EAASN,OAASM,EAASN,MAAMZ,UAC/CA,EAAUkB,EAASN,MAAMZ,SAG7B,MAAOmB,IAITrB,IAAac,MAAM,CACjBZ,QAAS,oBACTC,YAAaD,IAEXrC,GAAgC,oBAAbA,GACrBA,EAAS,EAAD,IApIP,2DAAP,wD,gHCFEyD,GALa,IAAIC,KAAW,CAChCC,QAAS,aAI2BC,iBAAX,+CAAoEjK,KAAe,GA2E/FkK,GArEQ,kBACrB,IAAIC,KAAU,CACZxD,QAAS,UACTyD,eAAe,EACfC,MAAO,QACPC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACTxD,QAAS,CACPyD,OAAQ,2CACRC,SAAU7K,IACV8K,IAAK,CACH,GAAI,8BACJ,IAAK,8BACL,IAAK,0BACL,MAAO,wBACP,MAAO,+BACP,MAAO,uCAIbC,OAAQ,CACNC,QAAS,CACPC,KAAM,uGACN5K,KAAM,SACNwI,YAAa,yBAEf6B,QAASQ,IACT/D,QAAS,CACPgE,GAAI,yCAGRC,UAAW,CACTV,QAASW,KACTlE,QAAS,CACPmE,IAAK,6BAgBT,oBAAqB,CACnBN,QAAS,CACPC,KAAM,4GACN5K,KAAM,WACNwI,YAAa,iDAEf6B,QAASV,GACTuB,UAAU,WAAD,4BAAE,WAAOlG,EAAUmG,GAAjB,SAAAhF,EAAA,sEACHnB,EAASoG,SADN,gCAEFpG,GAFE,2CAAF,qDAAC,IAKZqG,UAAW,CACThB,QAASiB,S,0BClFGC,kBAAO,CAAEC,KAAM,iBAAkBC,KAAM,OAAQC,SAAU,U,0DCG9D,SAASC,GAAQtJ,GAC9B,OAAKA,EAAMG,SAAgD,oBAA9BH,EAAMG,QAAQqB,YAIpC,cAAC,IAAD,aAAUD,KAAMvB,EAAMG,QAAQqB,eAAmBxB,IAH/C,yBCEX,IAAMuJ,GAAQ,eAACpJ,EAAD,uDAAW,GAAX,OAAkBA,EAAQqJ,SAAS,SAAWrJ,EAAQqJ,SAAS,SA4B9D,SAASC,GAAazJ,GACnC,IAAQO,EAA0BP,EAA1BO,YAAaqB,EAAa5B,EAAb4B,SACrB,EAA0BU,mBAAStC,EAAMI,OAAzC,mBAAOA,EAAP,KAAcsJ,EAAd,KACA,EAAwBpH,oBAAS,GAAjC,mBAAOqH,EAAP,KAAaC,EAAb,KAEMC,EAAsC,qBAAhB7J,EAAMI,MAAwBJ,EAAMI,MAAQA,EAClEC,EAAMC,YAAiBN,EAAMO,YAAasJ,GAE1CC,EAAgBC,sBAAW,uCAC/B,WAAMC,GAAN,iBAAAlG,EAAA,yDAC0B,qBAAbkG,EADb,qBAGQT,GADApJ,EAAU6J,GAFlB,0CAKsCzJ,EAAY0J,YAAY9J,GAL9D,QAKc+J,EALd,UAOU/J,EAAU+J,GAPpB,0DAYIR,EAASvJ,GACe,oBAAbyB,GACTA,EAASzB,GAdf,0DAD+B,sDAmB/B,CAACI,EAAaqB,IAGhB,OACE,gCACG+H,EACC,qBACEzI,MAAO,CACLiJ,OAAQ,IACRC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,QAETjH,QAAS,WACPsG,GAAQ,IATZ,SAYE,cAAC,KAAD,CACEY,MAAO,IACPC,WAAY,KACZC,QAAS,SAAArD,GACP/C,QAAQC,IAAI,aAAc8C,GAC1BuC,GAAQ,IAEVe,OAAQ,SAAAX,GACN,GAAIA,EAAU,CACZ1F,QAAQC,IAAI,aAAcyF,GAC1B,IAAIY,EAAmBZ,EACnBY,EAAiBjF,QAAQ,MAAQ,IACnCiF,EAAmBA,EAAiB7J,OAAO6J,EAAiBC,YAAY,OACxEvG,QAAQC,IAAI,gBAAiBqG,IAE/BhB,GAAQ,GACRE,EAAcc,KAGlB1J,MAAO,CAAEqJ,MAAO,YAIpB,GAEF,cAAC,KAAD,CACE9B,GAAG,YACH9K,KAAK,YACLmN,aAAa,MACbC,UAAW/K,EAAM+K,UACjBC,YAAahL,EAAMgL,YAAchL,EAAMgL,YAAc,UACrDC,OAAQ,cAAC3B,GAAD,CAASnJ,QAAS0J,EAAc7I,KAAM,EAAGS,MAAO,IACxDrB,MAAOmD,SAAOpB,MAAM+I,UAAUrB,KAAkBN,GAAMM,IAAiBN,GAAMlJ,GAAOA,EAAMwJ,EAC1FsB,WACE,sBACEjK,MAAO,CAAEkK,UAAW,EAAG/H,OAAQ,WAC/BC,QAAS,WACPsG,GAASD,IAHb,UAME,cAAC,KAAD,CAAO0B,MAAO,cAACC,GAAA,EAAD,CAAgBpK,MAAO,CAAEQ,SAAU,KAAjD,SACE,cAAC6J,EAAA,EAAD,CAAgBrK,MAAO,CAAEQ,SAAU,QAC5B,IARX,UAYFE,SAAU,SAAAyF,GACRyC,EAAczC,EAAEjG,OAAOhB,aCnGlB,SAASoL,GAAWxL,GACjC,MAAwBsC,mBAAStC,EAAMpB,MAAQ,MAAQ,OAAvD,mBAAO6M,EAAP,KAAaC,EAAb,KACA,EAA8BpJ,qBAA9B,mBAAOgG,EAAP,KAAgBqD,EAAhB,KACA,EAA0BrJ,qBAA1B,mBAAOlC,EAAP,KAAcsJ,EAAd,KAEMG,EAAsC,qBAAhB7J,EAAMI,MAAwBJ,EAAMI,MAAQA,EAQxE,OANAwL,qBAAU,WACH/B,GACH8B,EAAW,MAEZ,CAAC9B,IAGF,cAAC,KAAD,CACEmB,YAAahL,EAAMgL,YAAchL,EAAMgL,YAAc,aAAeS,EACpEV,UAAW/K,EAAM+K,UACjBE,OAAiB,QAATQ,EAAiB,IAAM,SAC/BrL,MAAOkI,EACP6C,WACGnL,EAAMpB,MAGL,qBACEsC,MAAO,CAAEmC,OAAQ,WACjBC,QAAS,WACP,GAAa,QAATmI,EACFC,EAAQ,OACRC,EAAW9B,QAGX,GADA6B,EAAQ,OACJ7B,EAAc,CAChB,IAAMgC,EAAW,IAAMhJ,WAAWgH,GAAgB7J,EAAMpB,OAAOqE,QAAQ,GACvE0I,EAAWE,QAEXF,EAAW9B,IAZnB,SAiBY,QAAT4B,EAAiB,mBAAW,qBAnB/B,GAuBJ7J,SAAQ,uCAAE,WAAMyF,GAAN,mBAAAvD,EAAA,sDACFkG,EAAW3C,EAAEjG,OAAOhB,MACb,QAATqL,GACIb,EAAmB/H,WAAWmH,KAE5B8B,EAAWlB,EAAmB5K,EAAMpB,MAC1C8K,EAASoC,GACqB,oBAAnB9L,EAAM4B,UACf5B,EAAM4B,SAASkK,GAEjBH,EAAW3B,IAEX2B,EAAW3B,IAGbN,EAASM,GACqB,oBAAnBhK,EAAM4B,UACf5B,EAAM4B,SAASoI,GAEjB2B,EAAW3B,IAnBL,2CAAF,wDC9Dd,IAAQnK,GAAoBC,IAApBD,KAAMkM,GAAcjM,IAAdiM,UA8BC,SAASC,GAAOhM,GAC7B,MAA0CsC,qBAA1C,mBAAO2J,EAAP,KAAsBC,EAAtB,KACAN,qBAAU,WAAM,4CACd,4BAAA9H,EAAA,0DACM9D,EAAMiE,OADZ,gCAE6BjE,EAAMiE,OAAOkI,aAF1C,OAEUC,EAFV,OAGIF,EAAiBE,GAHrB,4CADc,uBAAC,WAAD,wBAOdD,KACC,CAACnM,EAAMiE,SAEV,IA4BIqE,EACA+D,EACAC,EA9BEC,EAAkBvM,EAAMG,SAAW8L,EAEzC,EAAwB3J,qBAAxB,mBAAOyD,EAAP,KAAayG,EAAb,KACA,EAAoBlK,qBAApB,mBAAOmK,EAAP,KAAWC,EAAX,KACA,EAA4BpK,qBAA5B,mBAAOqK,EAAP,KAAeC,EAAf,KACA,EAAkCtK,qBAAlC,mBAAOuK,EAAP,KAAkBC,EAAlB,KACA,EAAoBxK,qBAApB,mBAAOyK,EAAP,KAAWC,EAAX,KAEMC,EAAejN,EAAM2C,SACzB,cAAC,IAAD,CAASuK,MAAM,SAAf,SACE,cAACC,EAAA,EAAD,CACE7J,QAAS,WACPkJ,GAASzG,IAEXqH,QAAS,GACTlM,MAAO,CACLkC,QAAS,EACTxF,MAAOoC,EAAMpC,MAAQoC,EAAMpC,MAAQ,GACnCyF,OAAQ,UACR3B,SAAU,GACVP,cAAe,cAKrB,GAMF,GAAIsL,EACFnE,EACE,gCACE,8BACE,cAAC,GAAD,CAAMxG,UAAQ,EAAd,SAAgByK,MAElB,cAAC,IAAD,CACEnM,MAAOmM,EACPvL,KAAK,MACLqM,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,QAIjCpB,EACE,eAAC,IAAD,CAEE/I,QAAS,WACPoJ,EAAM,KAHV,UAME,cAACnB,EAAA,EAAD,IANF,UACM,QAQRe,EACE,eAAC,IAAD,CAEEhJ,QAAS,WACP0J,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACgB,EAAA,EAAD,IAPF,iBACM,aASH,GAAIX,EAAI,CACb,IAAMA,EAAKY,aAAaC,QAAQ,kBAC1BC,EAAS,IAAItK,SAAOyI,OAAOe,GAEjC,GAAIc,EAAO1N,UAAYoM,EACrBjE,EACE,8BACE,8EAGC,CACL,IAAMwF,EAAsB,GACtBC,EAAiB,GASvB,IAAK,IAAMnF,KARXkF,EAAoBD,EAAO1N,UAAW,EACtC4N,EAAeC,KACb,qBAAK9M,MAAO,CAAEQ,SAAU,GAAI0B,QAAS,EAAG6K,gBAAiB,WAAzD,SACE,oBAAG5M,KAAM,OAAS0L,EAAlB,UACE,cAAChN,EAAD,CAASkB,WAAS,EAACd,QAAS0N,EAAO1N,QAASI,YAAaP,EAAMO,cADjE,IACkFsN,EAAO1N,QAAQY,OAAO,EAAG,SAI7F4M,aAChB,GAAI/E,EAAIjD,QAAQ,0BAA4B,EAAG,CAC7CrB,QAAQC,IAAIqE,GACZ,IAAMsF,EAASP,aAAaC,QAAQhF,GAC9BuF,GAAa,IAAI5K,SAAOyI,OAAOkC,GAChCJ,EAAoBK,GAAWhO,WAClC2N,EAAoBK,GAAWhO,UAAW,EAC1C4N,EAAeC,KACb,qBAAK9M,MAAO,CAAEQ,SAAU,IAAxB,SACE,oBAAGL,KAAM,OAAS6M,EAAlB,UACE,cAACnO,EAAD,CAASkB,WAAS,EAACd,QAASgO,GAAWhO,QAASI,YAAaP,EAAMO,cAAgB,IAClF4N,GAAWhO,QAAQY,OAAO,EAAG,UAQ1CuH,EACE,gCACE,6CAEA,8BACE,cAAC,GAAD,CAAMxG,UAAQ,EAAd,SAAgBiL,MAGlB,uBAEA,8EAEE,mBAAG3L,OAAO,SAASC,KAAM,mBAAqB0L,EAAIzL,IAAI,sBAAtD,2BAFF,OAOA,cAAC,IAAD,CACElB,MAAO,mBAAqB2M,EAC5B/L,KAAK,MACLqM,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,KAG7B,cAAC1B,GAAD,CAAW7K,MAAO,CAAEQ,SAAU,MAAQI,UAAQ,EAA9C,SACG,mBAAqBiL,IAGvBgB,EACC,gCACE,qDACCA,EACD,cAAC,IAAD,CACEzK,QAAS,WACP,IAAM8K,EAAoBnQ,OAAO0P,aAAaC,QAAQ,kBAClDQ,GACFnQ,OAAO0P,aAAaU,QAAQ,wBAA0BC,KAAKC,MAAOH,GAEpE,IACMI,EADejL,SAAOyI,OAAOyC,eACHC,cAAcF,WAC9CvQ,OAAO0P,aAAaU,QAAQ,iBAAkBG,GAC9CvQ,OAAOC,SAASyQ,UATpB,yBAgBF,MAMRtC,EACE,eAAC,IAAD,CAEE/I,QAAS,WACPoJ,EAAMH,GACNS,EAAM,KAJV,UAOE,cAACzB,EAAA,EAAD,IAPF,aACM,WASRe,EACE,eAAC,IAAD,CAEEhJ,QAAS,WACP0J,EAAM,IACNN,EAAM,KAJV,UAOE,cAACgB,EAAA,EAAD,IAPF,UACM,YASH,CACL,IAAMkB,GAAa,CACjBxL,QAAS,IAGXkF,EACE,gCACE,qBAAKpH,MAAO0N,GAAZ,SACE,cAACnF,GAAD,CACEsB,WAAS,EACTxK,YAAaP,EAAMO,YACnByK,YAAY,aACZ7K,QAAS0M,EACTjL,SAAUkL,MAGd,qBAAK5L,MAAO0N,GAAZ,SACE,cAACpD,GAAD,CACE5M,MAAOoB,EAAMpB,MACbwB,MAAOuM,EACP/K,SAAU,SAAAxB,GACRwM,EAAUxM,WAMpBiM,EACE,eAAC,IAAD,CAEE/I,QAAS,WACPoJ,EAAMH,GACNS,EAAM,KAJV,UAOE,cAACzB,EAAA,EAAD,IAPF,aACM,WASRe,EACE,eAAC,IAAD,CAEEhJ,QAAS,WACP0J,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACgB,EAAA,EAAD,IAPF,iBACM,QAWV,OACE,iCACGT,EACD,cAAC,IAAD,CACE4B,QAAS9I,EACTmH,MACE,gCACGX,EAAkB,cAACxM,EAAD,CAASI,QAASoM,EAAiBhM,YAAaP,EAAMO,cAAkB,cAAC,IAAD,IAC3F,qBAAKW,MAAO,CAAE4N,MAAO,QAASC,aAAc,IAA5C,SACE,cAAC1M,EAAD,CAASlC,QAASoM,EAAiB5J,SAAU3C,EAAM2C,SAAUQ,iBAAkBnD,EAAMpB,aAI3FoQ,KAAM,WACJtC,IACAM,IACAR,GAASzG,IAEXkJ,SAAU,WACRvC,IACAM,IACAR,GAASzG,IAEXmJ,OAAQ,CACN5C,EACAD,EACA,eAAC,IAAD,CAEE8C,KAAK,UACLC,UAAWzC,IAAWE,GAAaJ,EACnC4C,SAAS,EACT/L,QAAS,WACP,IAEIlD,EAFEwD,EAAKH,EAAWzD,EAAMiE,QAAUjE,EAAM2C,UAG5C,IACEvC,EAAQmD,SAAOpB,MAAMmN,WAAW,GAAK3C,GACrC,MAAOtF,GAEPjH,EAAQmD,SAAOpB,MAAMmN,WAAW,GAAKzM,WAAW8J,GAAQ1J,QAAQ,IAGlEW,EAAG,CACD2L,GAAI1C,EACJzM,UAEFoM,GAASzG,GACT2G,KArBJ,UAwBE,cAAC8C,EAAA,EAAD,IAxBF,UACM,WAxBV,SAmDGlH,OC7SM,SAASmH,GAAT,GAaX,IAZFC,EAYC,EAZDA,UACAvP,EAWC,EAXDA,QACAwP,EAUC,EAVDA,WACAC,EASC,EATDA,cACAC,EAQC,EARDA,gBACAjR,EAOC,EAPDA,MACAqC,EAMC,EANDA,UACA6O,EAKC,EALDA,UACAC,EAIC,EAJDA,cACAC,EAGC,EAHDA,kBACAlS,EAEC,EAFDA,cACAmS,EACC,EADDA,WAEQhQ,EAAiBC,cAAjBD,aAEFiQ,EAAe,GACjBJ,IACEA,EAAUK,eACZD,EAAalC,KACX,cAAC,IAAD,CAEE9M,MAAO,CAAEC,cAAe,MAAOiP,WAAY,EAAGhF,UAAW,GACzDiF,MAAM,QACNrP,KAAK,QACLsC,QAAS0M,EALX,mBACM,iBAURE,EAAalC,KACX,cAAC,IAAD,CAEE9M,MAAO,CAAEC,cAAe,MAAOiP,WAAY,EAAGhF,UAAW,GACzDiF,MAAM,QACNrP,KAAK,QAELsC,QAASyM,EANX,oBACM,iBAYZ,IAAMzH,EAAUrH,EACd,GAEA,iCACG6O,GAAaA,EAAUK,eACtB,qCACGhQ,GAAW,cAACJ,EAAD,CAASI,QAASA,EAASI,YAAasP,EAAiB/R,cAAeA,IACpF,cAACuE,EAAD,CAASlC,QAASA,EAASwC,SAAUiN,EAAehR,MAAOA,IAC3D,cAACoN,GAAD,CACE7L,QAASA,EACTwC,SAAUiN,EACV3L,OAAQ0L,EACRpP,YAAasP,EACbjR,MAAOA,EACPhB,MAAwB,UAAjBqC,EAA2B,UAAY,eAGhDyP,EACF,GACEO,EACF,qCACG9P,GAAW,cAACJ,EAAD,CAASI,QAASA,EAASI,YAAasP,EAAiB/R,cAAeA,IACpF,cAACuE,EAAD,CAASlC,QAASA,EAASwC,SAAUiN,EAAehR,MAAOA,OAG7D,GAED8Q,GAAaI,IAAcA,EAAUK,eACpC,qCACE,cAACpQ,EAAD,CAASI,QAASA,EAASI,YAAasP,EAAiB/R,cAAeA,IACxE,cAACuE,EAAD,CAASlC,QAASA,EAASwC,SAAUiN,EAAehR,MAAOA,IAC3D,cAACoN,GAAD,CACE7L,QAASA,EACTwC,SAAUiN,EACV3L,OAAQ0L,EACRpP,YAAasP,EACbjR,MAAOA,EACPhB,MAAwB,UAAjBqC,EAA2B,UAAY,eAIlD,gCAKN,OACE,gCACGqI,EACA4H,KCvIP,OAA6B9N,EAAQ,IAArC,GAAQD,MAAR,GAAemO,U,0BCCPnO,GAAUC,EAAQ,IAAlBD,MAEFoO,GAAe,SAACC,GAA0C,IAAnCC,EAAkC,wDAAlB3S,EAAkB,uCAC7D,GAAI0S,GAASA,EAAME,SACjB,IACE,OAAOF,EAAME,WACb,MAAOrJ,GACP,IAAMsJ,EAAc,SAAMxO,GAAMyO,YAAYJ,EAAO,SACnD,OAAOC,EAASE,EAAc,sBAAMzP,MAAO,CAAE2P,aAAc,aAActG,MAAO,QAAlD,SAA6DoG,IAG/F,GAAIH,GAASA,EAAM7K,SAAmC,IAAxB6K,EAAM7K,QAAQ,OAAgC,KAAjB6K,EAAM7P,OAC/D,OAAO8P,EAASD,EAAQ,cAACzQ,EAAD,CAASI,QAASqQ,EAAO9O,SAAU,GAAI5D,cAAeA,IAEhF,GAAI0S,GAASA,EAAMM,aAA0C,UAA3BN,EAAMM,YAAYnT,KAAkB,CACpE,IAAMoT,EAAe,SAAAC,GAAC,MAAK,CAAC,SAAU,WAAWC,gBAAgBD,GAAKA,EAAIE,GAAmBF,IACvFL,EAAc5J,KAAKE,UAAUuJ,EAAMW,IAAIJ,IAC7C,OAAON,EACLE,EAEA,sBAAMzP,MAAO,CAAE2P,aAAc,aAActG,MAAO,QAAlD,SAA6DoG,EAAYS,WAAW,IAAK,SAG7F,OAAOrK,KAAKE,UAAUuJ,IAGlBU,GAAqB,SAAAV,GAAK,OAAID,GAAaC,GAAO,ICoBzCa,GA7CS,SAAC,GAAwF,IAAtFC,EAAqF,EAArFA,iBAAkBC,EAAmE,EAAnEA,aAAcC,EAAqD,EAArDA,gBAAiBC,EAAoC,EAApCA,eAAgB3T,EAAoB,EAApBA,cAC1F,EAAgCwE,mBAAS,IAAzC,mBAAOoP,EAAP,KAAiBC,EAAjB,KAEMC,EAAU7H,sBAAW,sBAAC,4BAAAjG,EAAA,+EAEGwN,IAFH,OAElBO,EAFkB,OAGxBF,EAAYE,GACZJ,GAAe,GAJS,gDAMxBnN,QAAQC,IAAR,MANwB,yDAQzB,CAACoN,EAAaL,EAAkBG,IAMnC,OAJA7F,qBAAU,WACRgG,MACC,CAACA,EAASJ,EAAiBF,IAG5B,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEQ,KAAM,EACN5Q,MAAO,CACL6Q,UAAW,QACXC,QAAS,KACTjD,aAAc,EACdrN,SAAU,IANd,SASG6P,EAAa5T,OAEhB,cAAC,IAAD,CAAKmU,KAAM,GAAX,SACE,6BAAKvB,GAAamB,GAAU,EAAO5T,OAErC,cAAC,IAAD,CAAKgU,KAAM,EAAX,SACE,6BACE,cAAC,IAAD,CAAQ3C,KAAK,OAAO7L,QAASsO,EAASK,KAAK,wBAIjD,cAAC,KAAD,Q,SCtCN,GAA6B7P,EAAQ,IAA7BD,GAAR,GAAQA,MAAO+P,GAAf,GAAeA,UAETC,GAAsB,SAACZ,EAAca,EAAOC,GAChD,IAAM1U,GAAY,OAALyU,QAAK,IAALA,OAAA,EAAAA,EAAOzU,MAAOyU,EAAMzU,KAAO,SAAW0U,EAAa,IAChE,OAAOd,EAAa5T,KAAO,IAAMA,EAAO,IAAMyU,EAAMjD,MAGvC,SAASmD,GAAT,GAA+F,IAAvEhB,EAAsE,EAAtEA,iBAAkBC,EAAoD,EAApDA,aAAc5O,EAAsC,EAAtCA,SAAU9D,EAA4B,EAA5BA,SAAU4S,EAAkB,EAAlBA,eACzF,EAAwBnP,mBAAS,IAAjC,mBAAOiQ,EAAP,KAAaC,EAAb,KACA,EAA8BlQ,qBAA9B,mBAAOmQ,EAAP,KAAgBC,EAAhB,KACA,EAAsCpQ,qBAAtC,mBAAOqQ,EAAP,KAAoBC,EAApB,KAEMhP,EAAKH,EAAWd,EAAU9D,GAE1BgU,EAAStB,EAAasB,OAAO1B,KAAI,SAACiB,EAAOC,GAC7C,IAAMzJ,EAAMuJ,GAAoBZ,EAAca,EAAOC,GAEjDS,EAAU,GACd,GAAmB,YAAfV,EAAMjD,KACR2D,EACE,cAAC,IAAD,CAAS1M,UAAU,QAAQ8G,MAAM,aAAjC,SACE,qBACEiC,KAAK,SACLjO,MAAO,CAAEmC,OAAQ,WACjBC,QAAO,sBAAE,8BAAAQ,EAAA,sDACH3B,GAAM4Q,YAAYR,EAAK3J,MACnBoK,EAD0B,eACRT,IACb3J,GAAOzG,GAAM8Q,mBAAmBV,EAAK3J,IAChD4J,EAAQQ,MAEFA,EADD,eACmBT,IACb3J,GAAOzG,GAAM+Q,oBAAoBX,EAAK3J,IACjD4J,EAAQQ,IARH,2CAHX,kCAmBC,GAAmB,UAAfZ,EAAMjD,KACf2D,EACE,cAAC,IAAD,CAAS1M,UAAU,QAAQ8G,MAAM,SAAjC,SACE,qBACEiC,KAAK,SACLjO,MAAO,CAAEmC,OAAQ,WACjBC,QAAO,sBAAE,8BAAAQ,EAAA,sDACH3B,GAAM4Q,YAAYR,EAAK3J,MACnBoK,EAD0B,eACRT,IACb3J,GAAOzG,GAAMgR,aAAaZ,EAAK3J,IAC1C4J,EAAQQ,MAEFA,EADD,eACmBT,IACb3J,GAAOzG,GAAMsD,QAAQtD,GAAMiR,YAAYb,EAAK3J,KACvD4J,EAAQQ,IARH,2CAHX,kCAmBC,GAAmB,YAAfZ,EAAMjD,KACf2D,EACE,cAAC,IAAD,CAAS1M,UAAU,QAAQ8G,MAAM,aAAjC,SACE,qBACEiC,KAAK,SACLjO,MAAO,CAAEmC,OAAQ,WACjBC,QAAO,sBAAE,4BAAAQ,EAAA,uDACDkP,EADC,eACiBT,IACb3J,GAAOzG,GAAMmN,WAAWiD,EAAK3J,IACxC4J,EAAQQ,GAHD,2CAHX,iCAaC,GAAmB,YAAfZ,EAAMjD,KAAoB,CACnC,IAAMjF,EAAkBqI,EAAK3J,IAAQ2J,EAAK3J,GAAKpH,aAAe+Q,EAAK3J,GAAKpH,cAAc6R,OAClFnJ,GAA8C,KAA3BA,EAAgBvJ,SACrCmS,EACE,cAAC,IAAD,CAAS1M,UAAU,QAAQ8G,MAAM,UAAjC,SACE,cAAC,IAAD,CAAU3L,KAAM2I,EAAiBzI,MAAO,OAMhD,OACE,qBAAKP,MAAO,CAAEoS,OAAQ,GAAtB,SACE,cAAC,KAAD,CACEtS,KAAK,QACLgK,YAAaoH,EAAMzU,KAAOyU,EAAMjD,KAAO,IAAMiD,EAAMzU,KAAOyU,EAAMjD,KAChErE,aAAa,MACb1K,MAAOmS,EAAK3J,GACZjL,KAAMiL,EACNhH,SAAU,SAAA2R,GACR,IAAMP,EAAU,eAAQT,GACxBS,EAAWO,EAAMnS,OAAOzD,MAAQ4V,EAAMnS,OAAOhB,MAC7CoS,EAAQQ,IAEVQ,OAAQV,KAZoBlK,MAkB9B6K,EACJ,qBAAKvS,MAAO,CAAEoS,OAAQ,GAAtB,SACE,cAAC,KAAD,CACEtI,YAAY,oBACZpJ,SAAU,SAAAyF,GAAC,OAAIqL,EAAWrL,EAAEjG,OAAOhB,QACnCA,MAAOqS,EACPtH,WACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK2G,KAAM,GAAX,SACE,cAAC,IAAD,CAAS1L,UAAU,QAAQ8G,MAAM,YAAjC,SACE,qBACEiC,KAAK,SACLjO,MAAO,CAAEmC,OAAQ,WACjBC,QAAO,sBAAE,4BAAAQ,EAAA,uDACD4P,EAAa7Q,WAAW4P,KACdC,EAAW,GAAKgB,EAAU,SAAG,GAAM,KAF5C,2CAHX,8BAYJ,cAAC,IAAD,CAAK5B,KAAM,GAAX,SACE,cAAC,IAAD,CAAS1L,UAAU,QAAQ8G,MAAM,gBAAjC,SACE,qBACEiC,KAAK,SACLjO,MAAO,CAAEmC,OAAQ,WACjBC,QAAO,sBAAE,sBAAAQ,EAAA,sDACP4O,EAAWR,GAAUyB,KAAKlB,GAASmB,eAD5B,2CAHX,uCAxBiB,gBA0C7BrC,EAAasC,SACfhB,EAAO7E,KAAKyF,GAGd,IAAMK,EAAa,SAAAC,GACbA,GACFvB,EAAQ,KAINwB,EACkB,SAAtBzC,EAAapC,KACX,cAAC,IAAD,CAAQjO,MAAO,CAAEkP,YAAa,IAA9B,8BAEA,cAAC,IAAD,CAAQlP,MAAO,CAAEkP,YAAa,IAA9B,8BAoEJ,OAlEAyC,EAAO7E,KACL,qBAAK9M,MAAO,CAAEmC,OAAQ,UAAWiQ,OAAQ,GAAzC,SACE,cAAC,KAAD,CACE1R,SAAU,SAAAyF,GAAC,OAAIuL,EAAevL,EAAEjG,OAAOhB,QACvC6T,aAAa,GACbC,UAAU,EACV9E,UAAQ,EACRhP,MAAOuS,EACPa,OACE,qBACEtS,MAAO,CAAEqJ,MAAO,GAAI4J,OAAQ,GAAIb,OAAQ,GACxCnE,KAAK,UACL7L,QAAO,sBAAE,oCAAAQ,EAAA,yDACDsQ,EAAO7C,EAAasB,OAAO1B,KAAI,SAACiB,EAAOC,GAC3C,IAAMzJ,EAAMuJ,GAAoBZ,EAAca,EAAOC,GACjDjS,EAAQmS,EAAK3J,GAUjB,MATuB,UAAnBwJ,EAAMiC,SACRjU,EAAQ2G,KAAKC,MAAM5G,GACK,SAAfgS,EAAMjD,OAEb/O,EADY,SAAVA,GAA8B,MAAVA,GAA2B,QAAVA,GAA6B,SAAVA,GAA8B,WAAVA,EACtE,EAEA,GAGLA,KAI4B,SAAjCmR,EAAa+C,iBAA+D,SAAjC/C,EAAa+C,gBAjBrD,0CAmBoBhD,EAAgB,WAAhB,eAAoB8C,IAnBxC,OAmBGL,EAnBH,OAoBHD,EAAWC,GACXzO,EAAS4L,GAAmB6C,GArBzB,kDAuBHzP,QAAQwC,MAAR,MAvBG,uCA0BCyN,EAAY,GACd9B,IACF8B,EAAUnU,MAAQqS,GAEhB5T,IACF0V,EAAU1V,SAAWA,GA/BlB,UAqCkB+E,EAAG0N,EAAgB,WAAhB,eAAoB8C,GAApB,QAA0BG,MArC/C,QAqCCR,EArCD,OAsCLD,EAAWC,GACXzO,EAASiL,GAAawD,GAvCjB,QA0CPzP,QAAQC,IAAI,kBAAmBe,GAC/BsN,EAAetN,GACfmM,GAAe,GA5CR,0DAHX,SAkDGuC,OA1DyC,aAkElD,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACElC,KAAM,EACN5Q,MAAO,CACL6Q,UAAW,QACXC,QAAS,KACTjD,aAAc,EACdrN,SAAU,IANd,SASG6P,EAAa5T,OAEhB,cAAC,IAAD,CAAKmU,KAAM,GAAX,SAAgBe,OAElB,cAAC,KAAD,OCxPN,IAAM2B,GACJ,6CACa,IACX,sBAAKtT,MAAO,CAAEkC,QAAS,IAAvB,4BACkB,IAChB,sBACEqR,UAAU,YACVvT,MAAO,CAAEkP,WAAY,EAAqChN,QAAS,EAAGsR,aAAc,EAAGC,WAAY,UAFrG,4BAKQ,IAPV,MAQM,IACJ,sBACEF,UAAU,YACVvT,MAAO,CAAEkP,WAAY,EAAqChN,QAAS,EAAGsR,aAAc,EAAGC,WAAY,UAFrG,6BAKQ,IAdV,gCAiBA,sBAAKzT,MAAO,CAAEkC,QAAS,IAAvB,UACE,sBAAMlC,MAAO,CAAE0T,YAAa,GAAKC,KAAK,MAAM,aAAW,UAAvD,0BADF,iCAKE,sBACEJ,UAAU,YACVvT,MAAO,CAAEkP,WAAY,EAAqChN,QAAS,EAAGsR,aAAc,EAAGC,WAAY,UAFrG,6BAKQ,IACR,sCAXF,sCAkBW,SAASG,GAAT,GAYX,IAEEC,EAbJC,EAWC,EAXDA,eAEAnW,GASC,EAVDoW,QAUC,EATDpW,UACAoF,EAQC,EARDA,OACAtB,EAOC,EAPDA,SACAhF,EAMC,EANDA,KACAuX,EAKC,EALDA,KACAtW,EAIC,EAJDA,MACAd,EAGC,EAHDA,cACAD,EAEC,EAFDA,QACAsX,EACC,EADDA,eAEMC,EAAYC,YAAkB1S,EAAUwS,EAAgBtX,GAQxDsC,GAHJ4U,EAHGC,IACQI,EAAYA,EAAUzX,GAAQ,KAKhBoX,EAAS5U,QAAU,GACxCmV,EAAqBC,YAA2B5S,EAAUxC,GAE1DqV,EAA6BC,mBAAQ,WAMzC,OALgBV,EACZW,OAAOC,QAAQZ,EAASa,UAAUC,WAAWC,QAC3C,SAAAC,GAAE,MAAsB,aAAlBA,EAAG,GAAH,QAAkCb,GAAQA,EAAKvP,QAAQoQ,EAAG,GAAH,MAAiB,MAEhF,KAEH,CAAChB,EAAUG,IAEd,EAA0C5S,oBAAS,GAAnD,mBAAOkP,EAAP,KAAwBC,EAAxB,KACMuE,EAAkBR,EAA2BrE,KAAI,SAAA8E,GACrD,IArCgBF,EAqCVG,EACoC,SAAxCD,EAAiB,GAAG3B,iBAAsE,SAAxC2B,EAAiB,GAAG3B,gBAClES,EAASkB,EAAiB,IAC1BlB,EAASoB,QAAQlS,GAAQgS,EAAiB,IAEhD,MAA4B,oBAAjBC,EA1CmC,UAA9BH,EA2CEE,EAAiB,IA3CT3B,iBAAqD,SAAvByB,EAAGzB,iBAAoD,IAArByB,EAAGlD,OAAOlS,OA2DhG,cAAC2R,GAAD,CAEEhB,iBAAkB4E,EAClB3E,aAAc0E,EAAiB,GAC/BtT,SAAUA,EACV9D,SAAUA,EACV4S,eAAgBA,GALX,KAAOwE,EAAiB,IAd7B,cAAC,GAAD,CAEE3E,iBAAkB4E,EAClB3E,aAAc0E,EAAiB,GAC/BzE,gBAAiBA,EACjBC,eAAgBA,EAChB3T,cAAeA,GALVmY,EAAiB,GAAGtY,MAsB1B,QAGT,OACE,qBAAKuD,MAAO,CAAEoS,OAAQ,OAAQ/I,MAAO,QAArC,SACE,cAAC,KAAD,CACE2C,MACE,sBAAKhM,MAAO,CAAEQ,SAAU,IAAxB,UACG/D,EACD,sBAAKuD,MAAO,CAAE4N,MAAO,SAArB,UACE,cAAC/O,EAAD,CAASK,MAAOD,EAASrC,cAAeA,IACxC,cAACuE,EAAD,CAASlC,QAASA,EAASwC,SAAUA,EAAU/D,MAAOA,UAI5DoC,KAAK,QACLE,MAAO,CAAEkK,UAAW,GAAIb,MAAO,QAC/B8E,QAAS2G,GAAmBA,EAAgBrV,QAAU,EAZxD,SAcG2U,EAAqBU,EAAkBxB,O,sBC7HhD,IAAQrS,GAAUC,EAAQ,IAAlBD,MA8BO,SAASiU,GAAOpW,GAC7B,IAeIqW,EAfJ,EAA8B/T,qBAA9B,mBAAOnC,EAAP,KAAgBmW,EAAhB,KACA,EAA0ChU,qBAA1C,mBAAOiU,EAAP,KAAsBC,EAAtB,KAEQ5X,EAAmDoB,EAAnDpB,MAAOoM,EAA4ChL,EAA5CgL,YAAa4E,EAA+B5P,EAA/B4P,cAAerP,EAAgBP,EAAhBO,YAE3CqL,qBAAU,YACc,uCAAG,4BAAA9H,EAAA,0DACnB8L,EADmB,gCAEQA,EAAc6G,eAFtB,OAEfC,EAFe,OAGrBF,EAAiBE,EAAe,IAHX,2CAAH,qDAMtBC,KACC,CAAC/G,IAIFyG,EADElW,GAA0C,oBAAxBA,EAAQqB,YAClB,cAAC,IAAD,CAAUD,KAAMpB,EAAQqB,cAAeR,KAAM,EAAGS,MAAO,IAEvD,wBAGZ,IAMMmC,EAAKH,EAAWmM,GAEtB,OACE,+BACE,cAAC,KAAD,CACE5O,KAAK,QACLgK,YAAaA,GAA4B,eACzCC,OAAQoL,EACRjW,MAAOD,EACPyB,SAAU,SAAAyF,GAfM,IAAA2C,EACI,qBADJA,EAea3C,EAAEjG,OAAOhB,QAdH+B,GAAM+I,UAAUlB,IACrDsM,EAAWtM,IAcTwJ,OACE,eAAC,IAAD,CAAStG,MAAM,0CAAf,UACE,cAAC,IAAD,CACE5J,QAAS,WACPM,EAAG,CACD2L,GAAIpP,EACJC,MAAO+B,GAAMmN,WAAW,UAE1BgH,EAAW,KAEbjG,MAAM,SACN4B,KAAM,cAACzC,EAAA,EAAD,MAER,cAACxD,GAAD,CACEpO,MAAM,UACN+E,SAAUiN,EACVrP,YAAaA,EACb3B,MAAOA,EACPuB,QAASoW,WCzER,SAASK,GAAS5W,GAC/B,OACE,eAAC,IAAD,CACEsD,QAAS,WACPrF,OAAO8H,KAAK,gCAEd/E,KAAK,QACLqP,MAAM,QALR,UAOE,sBAAMnP,MAAO,CAAE0T,YAAa,GAA5B,SACE,sBAAMC,KAAK,MAAM,aAAW,WAA5B,4BAIyB,qBAAnB7U,EAAMnB,SAA2B,EAAIgY,SAAS7W,EAAMnB,SAAU,IAAzB,SAA+B,GAAM,GAZpF,O,eClBW,SAASiY,GAAT,GAA4C,IAA1BC,EAAyB,EAAzBA,KAAM7J,EAAmB,EAAnBA,MAAO8J,EAAY,EAAZA,SAC5C,OACE,mBAAG3V,KAAM0V,EAAM3V,OAAO,SAASE,IAAI,sBAAnC,SACE,cAAC,KAAD,CAAY4L,MAAOA,EAAO8J,SAAUA,EAAU9V,MAAO,CAAEmC,OAAQ,eAKrEyT,GAAOG,aAAe,CACpBF,KAAM,kDAEN7J,MAAO,4BAEP8J,SAAU,6B,yBCSG,SAASE,GAAKlX,GAC3B,MAA8BsC,mBAAS,QAAvC,mBAAO6U,EAAP,KAAgBC,EAAhB,KAEMjI,EAAO,UAEPkI,EAAa,GALe,WAMvBzX,GACyB,QAA9BI,EAAMsX,SAAS1X,GAAG/B,SAAmD,IAA9BmC,EAAMsX,SAAS1X,GAAG/B,SAC3DwZ,EAAWrJ,KACT,4BACE,cAAC,IAAD,CACE9M,MAAO,CAAEtD,MAAOoC,EAAMsX,SAAS1X,GAAGhC,OAClCuR,KAAMA,EACNnO,KAAK,QACLqP,MAAM,QACN/M,QAAS,WACPrF,OAAO8H,KAAK/F,EAAMsX,SAAS1X,GAAGrB,SANlC,SASGyB,EAAMsX,SAAS1X,GAAGjC,QAVfqC,EAAMsX,SAAS1X,GAAG/B,WAHhC,IAAK,IAAM+B,KAAKI,EAAMsX,SAAW,EAAtB1X,GAoBX,OACE,gCACE,eAAC,IAAD,CACEoB,KAAK,QACLqP,MAAM,QACN/M,QAAS,WACP8T,EAAW,OAJf,UAOE,cAACG,GAAA,EAAD,CAAsBrW,MAAO,CAAEtD,MAAO,aAAgB,IAC9B,qBAAhBoC,EAAMpB,MAAwB,EAAIoB,EAAMpB,MAAMqE,QAAQ,MAEhE,eAAC,IAAD,CACEiK,MAAM,UACN2B,QAAqB,OAAZsI,EACTlI,SAAU,WACRmI,EAAW,SAEblI,OAAQ,CACN,cAAC,IAAD,CAEE5L,QAAS,WACP8T,EAAW,SAHf,mBACM,SARV,UAiBE,4BACE,eAAC,IAAD,CACEjI,KAAMA,EACNnO,KAAK,QACLqP,MAAM,QACN/M,QAAS,WACPrF,OAAO8H,KAAK,2EAA6E/F,EAAMG,UALnG,UAQE,sBAAMe,MAAO,CAAE6N,aAAc,IAAM8F,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCATJ,YAgBF,8BACG,IACD,eAAC,IAAD,CACE1F,KAAMA,EACNnO,KAAK,QACLqP,MAAM,QACN/M,QAAS,WACP,IAAIkU,KAAe,CACjBC,YAAa,eACbC,YAAa,0CACbC,WAAY,qBACZC,UAAW,MACXC,YAAa7X,EAAMG,UAElB0F,GAAG,KAAK,SAAA0N,GAAK,OAAIjP,QAAQC,IAAIgP,MAC7B2B,QAbP,UAgBE,sBAAMhU,MAAO,CAAE6N,aAAc,IAAM8F,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCAjBJ,aAyBF,4BACE,eAAC,IAAD,CACE1F,KAAMA,EACNnO,KAAK,QACLqP,MAAM,QACN/M,QAAS,WACPrF,OAAO8H,KAAK,0CALhB,UAQE,sBAAM7E,MAAO,CAAE6N,aAAc,IAAM8F,KAAK,MAAM,aAAW,OAAzD,0BARF,gBAeF,cAAC,KAAD,IAEA,6CAECwC,Q,iFC/IT,IAAMS,GAAc,uCAAG,WAAMC,GAAN,eAAAjU,EAAA,6DACfkU,EAAI,IAAIzU,SAAO0U,UAAUC,sBAAsBH,GADhC,SAGfC,EAAEG,MAHa,gCAKdH,GALc,2CAAH,sDAQL,SAASI,GAAiBC,GACvC,MAAgC/V,mBAAS,MAAzC,mBAAOK,EAAP,KAAiB2V,EAAjB,KAEMC,EAAkBxO,sBAAW,sBAAC,8BAAAjG,EAAA,+EAEhBuB,QAAQmT,KAAKH,EAASlH,IAAI2G,KAFV,cAE1BE,EAF0B,gBAGfA,EAHe,OAG1BS,EAH0B,OAKhCH,EAAYG,GALoB,kDAQhCnU,QAAQC,IAAR,MARgC,0DAUjC,CAAC8T,IAOJ,OALAzM,qBAAU,WACR2M,MAEC,CAACxR,KAAKE,UAAUoR,KAEZ1V,EC/BmB,6CAEK,6CCsBd+V,KAAXC,OACS7Y,IAATD,KA2pBO+Y,I,WChrBA,SAASC,KACtB,IAAMhR,EAAQ5J,OAAO0P,aAAaC,QAAQ,SAC1C,EAAoCtL,sBAAYuF,GAAmB,UAAVA,IAAzD,mBAAOiR,EAAP,KAAmBC,EAAnB,KACA,EAA2C7Y,cAAnC8Y,EAAR,EAAQA,SAAU/Y,EAAlB,EAAkBA,aAAcgZ,EAAhC,EAAgCA,OAEhCrN,qBAAU,WACR3N,OAAO0P,aAAaU,QAAQ,QAASpO,KACpC,CAACA,IAOJ,OACE,sBAAKwU,UAAU,eAAevT,MAAO,CAAEkJ,SAAU,QAAS8O,MAAO,EAAGC,OAAQ,GAA5E,UACE,sBAAMjY,MAAO,CAAEkC,QAAS,GAAxB,SAA+C,UAAjBnD,EAA2B,eAAO,iBAChE,cAAC,KAAD,CAAQmZ,QAASN,EAAYlX,SARb,SAAAyX,GAClBN,EAAcM,GACdL,EAAS,CAAEnR,MAAOwR,EAAYJ,EAAOK,KAAOL,EAAOM,c,uBCVtCzZ,IAATD,K,qCC8NR,I,WC5He2Z,OAlGf,YAOI,IANFC,EAMC,EANDA,aACAC,EAKC,EALDA,aACAC,EAIC,EAJDA,gBACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,qBAGIC,GADH,EADD9J,kBAEqB,IACrB,GAAIyJ,GAAgBC,GAAgBC,GAAmBD,IAAiBC,EAAiB,CACvF,IAAMI,EAAkBpa,YAAQga,GAC1BK,EAAera,YAAQ+Z,GAE3BI,EADsB,OAApBH,GAA6C,QAAjBD,EAE5B,qBAAKxY,MAAO,CAAEiJ,OAAQ,EAAGC,SAAU,WAAY8O,MAAO,EAAG5O,IAAK,GAAIlH,QAAS,IAA3E,SACE,cAAC,KAAD,CACE8C,QAAQ,gCACRC,YACE,4CACW,8CADX,+CAC2E,sCAD3E,yBAGE,6FAGJgJ,KAAK,QACL8K,UAAU,MAMd,qBAAK/Y,MAAO,CAAEiJ,OAAQ,EAAGC,SAAU,WAAY8O,MAAO,EAAG5O,IAAK,GAAIlH,QAAS,IAA3E,SACE,cAAC,KAAD,CACE8C,QAAQ,6BACRC,YACE,4CACW,4BAAI4T,GAAmBA,EAAgBpc,OADlD,kCAC2F,IACzF,cAAC,IAAD,CACE2F,QAAO,sBAAE,gCAAAQ,EAAA,6DACDoW,EAAWjc,OAAOic,SAClBrT,EAAO,CACX,CACEhJ,QAAS,KAAO+b,EAAc/b,QAAQsc,SAAS,IAC/CC,UAAWR,EAAcjc,KACzB0c,eAAgBT,EAAcS,eAC9BC,QAAS,CAACV,EAAc7b,QACxBwc,kBAAmB,CAACX,EAAc9b,iBAGtCwG,QAAQC,IAAI,OAAQsC,GAXb,kBAgBYqT,EAASM,QAAQ,CAChCC,OAAQ,6BACRC,OAAQ,CAAC,CAAE7c,QAASgJ,EAAK,GAAGhJ,YAlBzB,OAgBL8c,EAhBK,kFAuBcT,EAASM,QAAQ,CAChCC,OAAQ,0BACRC,OAAQ7T,IAzBP,QAuBH8T,EAvBG,kEAgCHA,GACFrW,QAAQC,IAAIoW,GAjCP,iEADX,SAsCE,4BAAIX,GAAgBA,EAAarc,YAIvCwR,KAAK,QACL8K,UAAU,WAMlBH,EAAiBD,EAAuB,KACtC,qBAAK3Y,MAAO,CAAEiJ,QAAS,EAAGC,SAAU,WAAY8O,MAAO,IAAK5O,IAAK,GAAIlH,QAAS,GAAIxF,MAAOgc,EAAchc,OAAvG,SACGgc,EAAcjc,OAOrB,OAFA2G,QAAQC,IAAI,CAAEuV,mBAEPA,GClDMc,OA3Cf,YAAgE,IAA1ChL,EAAyC,EAAzCA,cAAegK,EAA0B,EAA1BA,cAAezZ,EAAW,EAAXA,QAClD,EAA0CmC,oBAAS,GAAnD,mBAAOuY,EAAP,KAAsBC,EAAtB,KAGMC,EAAmBrY,YAAWkN,EAAezP,GAM7C6a,EAAWvX,EAAWmM,EAHXqL,YAAYrB,EAAe,SAKxCsB,EAAa,GA4BjB,OAzBGL,GACDjL,GACAA,EAAcuL,UACqB,QAAnCvL,EAAcuL,SAAStd,SACvBkd,GACAxX,SAAOpB,MAAMa,YAAY+X,IAAqB,IAE9CG,EACE,qBAAKha,MAAO,CAAEkC,QAAS,GAAIkF,QAAS,eAApC,SACE,cAAC,IAAD,CACE6G,KAAK,UACL7L,QAAS,WACP0X,EAAS,CACPzL,GAAIpP,EACJC,MAAOmD,SAAOpB,MAAMmN,WAAW,UAEjCwL,GAAiB,IAPrB,qEAgBCI,G,wDC3CHE,GAAOC,KAAKD,KAiNHE,OA/Mf,YAAyE,IAA1DC,EAAyD,EAAzDA,IAAKzd,EAAoD,EAApDA,cAAe0d,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,eAAgB7X,EAAM,EAANA,GAEhE,EAAwBtB,oBAAS,GAAjC,mBAAOoZ,EAAP,KAAaC,EAAb,KACA,EAA4BrZ,mBAAS,IAArC,mBAAOsZ,EAAP,KAAeC,EAAf,KACA,EAAkCvZ,mBAAS,IAA3C,mBAAOwZ,EAAP,KAAkBC,EAAlB,KACA,EAA4BzZ,mBAASiZ,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA8B3Z,oBAAS,GAAvC,mBAAO+M,EAAP,KAAgB6M,EAAhB,KAEMC,EAAiB,SAAAC,GACrB,GAAKA,GAA6B,KAAfA,EAAnB,CAMA,IAFA,IAAIC,EAAU,GACRC,EAAeF,EAAWrb,OAAO,EAAGqb,EAAWzb,OAAS,GAAGF,MAAM,MAC9D8b,EAAI,EAAGA,EAAID,EAAa3b,OAAQ4b,IAAK,CAC5C,IAAIC,EAAYF,EAAaC,GAAG9b,MAAM,OAAO,GACxB,MAAjB+b,EAAU,KAAYA,EAAYA,EAAUzb,OAAO,EAAGyb,EAAU7b,OAAS,IACrC,MAApC6b,EAAUA,EAAU7b,OAAS,KAAY6b,EAAYA,EAAUzb,OAAO,EAAGyb,EAAU7b,OAAS,IAChG,IAAI8b,EAAa,IAC2B,IAAxCH,EAAaC,GAAG9b,MAAM,OAAOE,SAC/B8b,EAAaH,EAAaC,GAAG9b,MAAM,OAAO,IAE5C4b,EAAQG,GAAaC,EAEvBZ,EAAUQ,QAfRR,EAAU,KAkBRa,EAAkB,WACtBpY,QAAQC,IAAI,kBAAmBqX,GAC/B,IAAIQ,EAAa,IACjB,IAAK,IAAII,KAAaZ,EACM,MAAtBA,EAAOY,GACTJ,GAAU,WAAQI,EAAR,OAEVJ,GAAU,WAAQI,EAAR,cAAuBZ,EAAOY,GAA9B,OAGaJ,EAAvBA,EAAWzb,OAAS,EAAgByb,EAAWrb,OAAO,EAAGqb,EAAWzb,OAAS,GAAK,IACpE,GAClBob,EAAaK,IAcTO,EAAM,uCAAG,gCAAA7Y,EAAA,yDACRkY,EADQ,iEAEGR,EAAcoB,QAAQC,SAASb,EAAOc,QAAQ3C,YAFjD,cAET4C,EAFS,OAGTC,EAAOjW,KAAKC,MAAMiW,KAAKF,EAAItc,MAAM,KAAK,KAC1C6D,QAAQC,IAAI,SAAUyX,EAAQgB,GAJjB,SAKUxB,EAAcoB,QAAQM,aAAalB,EAAOc,SALpD,OAKTV,EALS,OAMbH,EAAU,2BAAKD,GAAN,IAAcmB,MAAOH,EAAKG,MAAOrB,UAAWM,KANxC,4CAAH,qDASN5X,EAAS,SAAC0B,EAASC,EAAa8L,GACpCjM,IAAaD,KAAK,CAChBG,QAASA,EACTC,YAAaA,EACb8L,KAAMA,KAIJmL,EAAa,uCAAG,4BAAAtZ,EAAA,yDAChBgY,IAAcE,EAAOF,UADL,uBAElBH,GAAQ,GAFU,iCAKpBrX,QAAQC,IAAI,gBAAiByX,GAC7BE,GAAW,GANS,SAQZ5W,EAAS1B,EAAG6X,EAAemB,QAAQb,aAAaC,EAAOc,QAAShB,IAAY,SAAAuB,GAChF1B,GAAQ,IACJ0B,GAA6B,cAAlBA,EAAOC,QAA4C,IAAlBD,EAAOC,QACrD9Y,EACE,WACA,qBAAuBwX,EAAOc,QAAQ3C,WAAa,WACnD,cAACoD,GAAA,EAAD,CAAerc,MAAO,CAAEtD,MAAO,iBAdnB,SAkBZ0H,EAlBY,yDAoBlBhB,QAAQC,IAAI,UAAZ,MACAC,EACE,UACA,qBAAuBwX,EAAOc,QAAQ3C,WAAa,UACnD,cAACqD,GAAA,EAAD,CAA2Btc,MAAO,CAAEtD,MAAO,cAxB3B,yBA2Bd+e,IA3Bc,QA4BpBT,GAAW,GA5BS,0DAAH,qDA+BnBtQ,qBAAU,WACH2P,GACLU,EAAUV,KACT,CAACA,IAEJ3P,qBAAU,WACHoQ,IACL1X,QAAQC,IAAI,mBAAoByX,GAChCD,EAAaC,EAAOF,WACpBK,EAAeH,EAAOF,cACrB,CAACE,IAEJ,IAAMyB,EACJ,cAAC,IAAD,UAlHiB,CAAC,cAAe,UAAW,aAAc,UAAW,UAAW,SAAU,SAAU,WAmHtFtM,KAAI,SAACqL,EAAWD,GAC1B,OACE,cAAC,IAAKnB,KAAN,UACE,cAAC,IAAD,CACEjM,KAAK,OACL7L,QAAS,WACPuY,GAAU,SAAAD,GACR,GAAIY,KAAaZ,EAAQ,CACvB,IAAIvQ,EAAQwL,SAAS+E,EAAOY,IAC5BnR,IACAuQ,EAAOY,GAAanR,EAAM8O,gBAE1ByB,EAAOY,GAAa,IAEtB,OAAOZ,KAETc,KAbJ,SAgBGF,KAjBWA,QAyBlBkB,EACJ,cAAC,IAAD,UACGhI,OAAOiI,KAAK/B,GAAQzK,KAAI,SAACqL,EAAWD,GACnC,OACE,cAAC,IAAKnB,KAAN,UACE,cAAC,IAAD,CACEjM,KAAK,OACL7L,QAAS,WACPuY,GAAU,SAAAD,GACR,IAAIvQ,EAAQwL,SAAS+E,EAAOY,IAO5B,OALc,MADdnR,SAESuQ,EAAOY,GAEdZ,EAAOY,GAAanR,EAAM8O,WAErByB,KAETc,KAbJ,SAgBGF,KAjBWA,QAyBxB,OACE,gCACE,cAACpB,GAAD,UACE,cAACA,GAAKwC,KAAN,CACE1Q,MACE,gCACE,mBAAG7L,KAAM2a,EAAO7V,YAAhB,SAA8B6V,EAAOre,KAAO,aAC5C,cAACoC,EAAD,CAASK,MAAO4b,EAAO6B,MAAO/f,cAAeA,OAGjDqI,YAAakJ,EAAU,UAAa,qBAAKyO,IAAK9B,EAAOmB,MAAO5S,MAAM,MAAM4J,OAAO,MAAM7Q,QA3IxE,WACnBgB,QAAQC,IAAI,eAAgBgX,EAAKK,EAAQE,GACzCH,GAAQ,UA4IN,eAAC,IAAD,CACEzO,MAAM,SACN2B,QAAS6M,EACTzM,SA5Ie,WACnB0M,GAAQ,GACRI,EAAaC,EAAOF,WACpBK,EAAeH,EAAOF,YA0IlB9M,KAAMoO,EACNW,gBAAgB,EAChB1O,QAASA,EANX,UAQE,cAAC,KAAD,CAAU2O,QAASP,EAAnB,SACE,cAAC,IAAD,CAAQtO,KAAK,UAAb,mBATJ,OAYE,cAAC,KAAD,CAAU6O,QAASN,EAAnB,SACE,cAAC,IAAD,CAAQvO,KAAK,UAAb,sBAbJ,iBAgBE,4CAAe2M,Y,+BCvIRmC,OAnEf,YAAsD,IAAtCzC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,eAAgB7X,EAAM,EAANA,GACvCsa,EAAcC,YAAkB3C,EAAe,UAAW,eAChE,EAAwBlZ,mBAAS,IAAjC,mBAAO8b,EAAP,KAAaC,EAAb,KACA,EAA8B/b,oBAAS,GAAvC,mBAAO+M,EAAP,KAAgB6M,EAAhB,KAGMS,EAAM,uCAAG,WAAO2B,EAAY/B,GAAnB,uBAAAzY,EAAA,+EAEI0X,EAAcoB,QAAQ2B,aAAahC,GAFvC,cAEP9T,EAFO,gBAGO+S,EAAcoB,QAAQ4B,QAAQ/V,GAHrC,cAGPoV,EAHO,gBAIKrC,EAAcoB,QAAQC,SAASpU,GAJpC,cAIPsU,EAJO,QAMPxB,EAAMxU,KAAKC,MAAMiW,KAAKF,EAAItc,MAAM,KAAK,MACrCod,MAAQA,EACZtC,EAAIuB,QAAUrU,EARH,UASW+S,EAAcoB,QAAQM,aAAazU,GAT9C,QASPqT,EATO,OAUXP,EAAIO,UAAYA,EAEhBwC,EAAWtQ,KAAKuN,GAZL,kDAcXjX,QAAQC,IAAR,MAdW,0DAAH,wDAoBNka,EAAgB,uCAAG,kCAAA3a,EAAA,sDAKvB,IAJAoY,GAAW,GACPwC,EAAMR,EAAYxN,WAClBiO,EAAQ,GACRL,EAAa,GACR/B,EAAI,EAAGA,EAAImC,EAAKnC,IACvBoC,EAAM3Q,KAAK2O,EAAO2B,EAAY/B,IANT,gBAQjBlX,QAAQuZ,IAAID,GARK,OASvBN,EAAQC,GACRpC,GAAW,GAVY,2CAAH,qDAkBtB,OALAtQ,qBAAU,YACHsS,GAAeE,EAAKzd,OAAS,GAClC8d,MACC,CAACP,IAGF,8BACE,sDACeA,QADf,IACeA,OADf,EACeA,EAAa/D,WAC1B,cAAC,KAAD,CACE0E,WAAW,aACXC,WAAYV,EACZ/O,QAASA,EACT0P,WAAY,SAAAC,GAAI,OACd,cAAC,GAAD,CACEzD,IAAKyD,EACLlhB,cAnDU,gCAoDV0d,cAAeA,EACfC,eAAgBA,EAChB7X,GAAIA,a,gCCxDC8U,KAAXC,O,sCC8LOsG,I,UC7FAC,OAnGf,YAAsE,IAArD1D,EAAoD,EAApDA,cAAe1d,EAAqC,EAArCA,cAAe2d,EAAsB,EAAtBA,eAAgB7X,EAAM,EAANA,GAC7D,EAAwBtB,mBAAS,IAAjC,mBAAO8b,EAAP,KAAaC,EAAb,KACA,EAA8B/b,mBAAS,MAAvC,mBAAOwa,EAAP,KAAgBqC,EAAhB,KACA,EAA0B7c,mBAAS,MAAnC,mBAAOub,EAAP,KAAcuB,EAAd,KACA,EAA8B9c,oBAAS,GAAvC,mBAAO+M,EAAP,KAAgB6M,EAAhB,KAEMmD,EAAiB,uCAAG,kCAAAvb,EAAA,yDACnBgZ,EADmB,wDAExBuB,EAAQ,IACRnC,GAAW,GAHa,kBAKHV,EAAcoB,QAAQ4B,QAAQ1B,GAL3B,cAKlBwC,EALkB,iBAMN9D,EAAcoB,QAAQC,SAASC,GANzB,eAMlBC,EANkB,QAOlBxB,EAAMxU,KAAKC,MAAMiW,KAAKF,EAAItc,MAAM,KAAK,MACrCod,MAAQyB,EACZ/D,EAAIuB,QAAUA,EATQ,UAUAtB,EAAcoB,QAAQM,aAAaJ,GAVnC,QAUlBhB,EAVkB,OAWtBP,EAAIO,UAAYA,EAChBuC,EAAQ,CAAC9C,IAZa,kDActBjX,QAAQC,IAAR,MACA8Z,EAAQ,IAfc,QAiBxBnC,GAAW,GAjBa,0DAAH,qDAoBjBqD,EAAgB,uCAAG,wCAAAzb,EAAA,yDAClB+Z,EADkB,wDAEvBQ,EAAQ,IACRnC,GAAW,GACPsD,EAAQ,GAJW,kBAMDhE,EAAcoB,QAAQ6C,UAAU5B,GAN/B,OAMjBpb,EANiB,OAOZ8Z,EAAI,EAPQ,aAOLA,EAAI9Z,GAPC,kCASJ+Y,EAAcoB,QAAQ8C,oBAAoB7B,EAAOtB,GAT7C,eASf9T,EATe,iBAUH+S,EAAcoB,QAAQC,SAASpU,GAV5B,eAUfsU,EAVe,QAWfxB,EAAMxU,KAAKC,MAAMiW,KAAKF,EAAItc,MAAM,KAAK,MACrCod,MAAQA,EACZtC,EAAIuB,QAAUrU,EAbK,UAcG+S,EAAcoB,QAAQM,aAAazU,GAdtC,QAcfqT,EAde,OAenBP,EAAIO,UAAYA,EAEhB0D,EAAMxR,KAAKuN,GAjBQ,QAOQgB,IAPR,0EAoBrBjY,QAAQC,IAAR,MACA8Z,EAAQ,IArBa,QAuBvBA,EAAQmB,GACRtD,GAAW,GAxBY,0DAAH,qDAmCtB,OACE,gCACE,cAAC,KAAD,CACElR,YAAY,yBACZpJ,SAZsB,SAAA+d,GAC1BR,EAAWjN,KAAUyB,KAAKgM,KAYtBze,MAAO,CAAEoS,OAAQ,MAAO/I,MAAO,SAEjC,cAAC,IAAD,CAAQ4E,KAAK,UAAU7L,QAAS,kBAAM+b,KAAtC,mBAGA,cAAC,KAAD,CAAOrU,YAAY,uBAAuBpJ,SAdpB,SAAA+d,GACxBP,EAASO,EAAIve,OAAOhB,QAaqDc,MAAO,CAAEoS,OAAQ,MAAO/I,MAAO,SACtG,cAAC,IAAD,CAAQ4E,KAAK,UAAU7L,QAAS,kBAAMic,KAAtC,mBAGA,uBACCnB,EAAKzd,OAAS,EACb,+CAEE,cAAC,KAAD,CACEke,WAAW,aACXC,WAAYV,EACZW,WAAY,SAAAC,GAAI,OACd,cAAC,GAAD,CACEzD,IAAKyD,EACLlhB,cAAeA,EACf0d,cAAeA,EACfC,eAAgBA,EAChB7X,GAAIA,UAKV,KACHyL,EAAU,4CAAsB,SCjE/B9L,GAAWnB,EAAQ,IAAnBmB,OAsBFqc,GAAiBniB,IAASY,SAQ1ByR,GAAY+P,KAGZ5H,GAAY,CAChB,0EADgB,+CAEwBza,KACxC,oCA0WasiB,OAvWf,SAAa9f,GAGX,IAAM+f,EAAiB,CAACH,GAAejiB,KAAM,UAAW,WAExD,EAAgD2E,qBAAhD,mBAAO0d,EAAP,KAAyBC,EAAzB,KACA,EAA8B3d,qBAA9B,mBAAOnC,EAAP,KAAgBmW,EAAhB,KACA,EAA8ChU,mBAASyd,EAAe,IAAtE,mBAAOG,EAAP,KACMhiB,GADN,KACiBiiB,eAEXvG,EAAgBnc,IAASyiB,GAGzBpiB,EAAgB8b,EAAc9b,cAG9B8R,EAAgBwI,GAAiB,CACrCgI,6JAAYC,mBAAqBD,6JAAYC,mBAAqBzG,EAAc7b,SAE5E8R,EAAkBuI,GAAiBH,IAE9B3T,QAAQC,IAAR,gBAAqB2b,EAArB,aAGA5b,QAAQC,IAAI,+CAEvB,IAAMyL,EAAiB,uCAAG,sBAAAlM,EAAA,sEAClBgM,GAAUwQ,sBADQ,WAEpBN,IAAoBA,EAAiBrd,UAA2D,mBAAxCqd,EAAiBrd,SAAS4d,WAF9D,gCAGhBP,EAAiBrd,SAAS4d,aAHV,OAKxBC,YAAW,WACTviB,OAAOC,SAASyQ,WACf,GAPqB,2CAAH,qDAWjB/P,EAAQ6hB,YAAoB7G,EAAe/J,GAG3ChR,EAAWoc,YAAYrB,EAAe,QAGtCjK,EADwB+Q,YAAyBV,EAAkBpQ,EAtDjD,MAuDiB3L,OAEzC2H,qBAAU,WAAM,4CACd,4BAAA9H,EAAA,0DACM6L,EADN,gCAE6BA,EAAWxD,aAFxC,OAEUC,EAFV,OAGIkK,EAAWlK,GAHf,4CADc,uBAAC,WAAD,wBAOdD,KACC,CAACwD,IAGJ,IAAM+J,EAAe9J,GAAiBA,EAAcuL,UAAYvL,EAAcuL,SAAStd,QACjF8b,EACJhK,GAAcA,EAAWhN,UAAYgN,EAAWhN,SAASwY,UAAYxL,EAAWhN,SAASwY,SAAStd,QAK9F+F,EAAKH,EAAWkM,EAAY9Q,GAG5Bkc,EAAmBrY,YAAWkN,EAAezP,GAG7CwgB,EAAqBje,YAAWmN,EAAiB1P,GAKjDgV,EAAiB,CAAEyL,kBAAmBA,IAAqB,GAAIC,kBAAmBA,MAAqB,IAGvGrF,EAAgBnG,YAAkBzF,EAAeuF,GAGjDsG,EAAiBpG,YAAkB1F,EAAYwF,EAAgBuE,GAK/DoH,EAAmBzL,YAAkBxF,EAAiBsF,GAG5D4L,YAAWlR,GAAiB,WAC1BvL,QAAQC,IAAR,8CAA8CsL,EAAgBmR,sBAIhE,IAAMC,EAAsB9C,YAAkB2C,EAAkB,MAAO,YAAa,CAClF,+CAIc3C,YAAkB3C,EAAe,UAAW,WAU5D5P,qBAAU,WAGNiE,GACA1P,GACAwZ,GACAoB,GACA4F,GACAnF,GACAC,GACAqF,IAEAxc,QAAQC,IAAI,yGACZD,QAAQC,IAAI,+BAAsBsL,GAClCvL,QAAQC,IAAI,4BAAmBmV,GAC/BpV,QAAQC,IAAI,mDAA2BpE,GACvCmE,QAAQC,IAAI,8DAA4BoV,GACxCrV,QAAQC,IAAI,gCAAuBwW,EAAmBxX,GAAOpB,MAAMa,YAAY+X,GAAoB,OACnGzW,QAAQC,IAAI,kCAAyBoc,EAAqBpd,GAAOpB,MAAMa,YAAY2d,GAAsB,OACzGrc,QAAQC,IAAI,6BAAoBiX,GAChClX,QAAQC,IAAI,wCAA+Buc,GAC3Cxc,QAAQC,IAAI,qCAA4B0c,GACxC3c,QAAQC,IAAI,8BAAqBkX,MAElC,CACD5L,EACA1P,EACAwZ,EACAoB,EACA4F,EACAnF,EACAC,EACAqF,EACApH,EACAuH,IAGF,IAAMlR,EAAgBhG,sBAAW,sBAAC,4BAAAjG,EAAA,sEACTgM,GAAUqG,UADD,OAC1BxT,EAD0B,OAEhCsd,EAAoB,IAAI1c,GAAO0U,UAAUiJ,aAAave,IAEtDA,EAASkD,GAAG,gBAAgB,SAAAhI,GAC1ByG,QAAQC,IAAR,2BAAgC1G,EAAhC,yBACAoiB,EAAoB,IAAI1c,GAAO0U,UAAUiJ,aAAave,OAGxDA,EAASkD,GAAG,mBAAmB,WAC7BvB,QAAQC,IAAR,oBACA0b,EAAoB,IAAI1c,GAAO0U,UAAUiJ,aAAave,OAIxDA,EAASkD,GAAG,cAAc,SAACsb,EAAMC,GAC/B9c,QAAQC,IAAI4c,EAAMC,GAClBpR,OAjB8B,2CAoB/B,CAACiQ,IAEJrU,qBAAU,WACJkE,GAAUK,gBACZJ,MAED,CAACA,IAEJ,IAAMsR,EAAkBzR,GAAiBA,EAAc0R,aAAuD,IAAzC1H,EAAcjc,KAAKgI,QAAQ,SAEhG,OACE,sBAAK8O,UAAU,MAAf,UAEE,cAACqC,GAAD,IACA,cAAC,GAAD,CACE2C,aAjMa,KAkMbC,aAAcA,EACdC,gBAAiBA,EACjBC,cAAeA,EACf5J,kBAAmBA,EACnB6J,qBApMqB,QAsMvB,eAAC,IAAD,CAAM3Y,MAAO,CAAE6Q,UAAW,SAAU3G,UAAW,IAAMmW,aAAc,CAACrjB,EAASsjB,UAAW/V,KAAK,aAA7F,UACE,cAAC,IAAK2P,KAAN,UACE,cAAC,IAAD,CAAM7L,GAAG,8BAAT,uBADa,+BAGf,cAAC,IAAK6L,KAAN,UACE,cAAC,IAAD,CAAM7L,GAAG,mCAAT,wBADa,oCAGf,cAAC,IAAK6L,KAAN,UACE,cAAC,IAAD,CAAM7L,GAAG,mCAAT,8BADa,uCAiBjB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkS,OAAK,EAACC,KAAK,8BAAlB,SAEE,cAAC,GAAD,CAAMlG,cAAeA,EAAeC,eAAgBA,EAAgB7X,GAAIA,MAE1E,cAAC,IAAD,CAAO6d,OAAK,EAACC,KAAK,mCAAlB,SACE,cAAC,GAAD,CAAOlG,cAAeA,EAAe1d,cAAeA,EAAe2d,eAAgBA,EAAgB7X,GAAIA,MAEzG,cAAC,IAAD,CAAO6d,OAAK,EAACC,KAAK,mCAAlB,SACE,cAAC5M,GAAD,CACEnX,KAAK,UACLiB,MAAOA,EACPqF,OAAQ0L,EACRhN,SAAUiN,EACVzP,QAASA,EACTrC,cAAeA,EACfqX,eAAgBA,SAyDtB,cAAC,GAAD,IAGA,sBAAKjU,MAAO,CAAEkJ,SAAU,QAAS2H,UAAW,QAASmH,MAAO,EAAG5O,IAAK,EAAGlH,QAAS,IAAhF,UACE,sBAAKlC,MAAO,CAAEoH,QAAS,OAAQqZ,KAAM,EAAGC,WAAY,UAApD,UA3SqB,MAqTnB,cAACnS,GAAD,CACEC,UAvTc,KAwTdvP,QAASA,EACTyP,cAAeA,EACfD,WAAYA,EACZE,gBAAiBA,EACjBjR,MAAOA,EACPkR,UAAWA,GACXC,cAAeA,EACfC,kBAAmBA,EACnBlS,cAAeA,OAGlBid,EAAiB8G,IAAIte,GAAO2O,UAAUyB,KAAK,OAC1C,cAAC,GAAD,CAAY/D,cAAeA,EAAegK,cAAeA,EAAezZ,QAASA,OAKrF,sBAAKe,MAAO,CAAEkJ,SAAU,QAAS2H,UAAW,OAAQ1H,KAAM,EAAG8O,OAAQ,GAAI/V,QAAS,IAAlF,UACE,eAAC,IAAD,CAAK0e,MAAM,SAASC,OAAQ,CAAC,EAAG,GAAhC,UACE,cAAC,IAAD,CAAKjQ,KAAM,EAAX,SACE,cAACoF,GAAD,CAAMtY,MAAOA,EAAOuB,QAASA,EAASmX,SAAU7Z,QAGlD,cAAC,IAAD,CAAKqU,KAAM,EAAG5Q,MAAO,CAAE6Q,UAAW,SAAUC,QAAS,IAArD,SACE,cAAC4E,GAAD,CAAU/X,SAAUA,MAEtB,cAAC,IAAD,CAAKiT,KAAM,EAAG5Q,MAAO,CAAE6Q,UAAW,SAAUC,QAAS,GAArD,SACE,eAAC,IAAD,CACE1O,QAAS,WACPrF,OAAO8H,KAAK,iDAEd/E,KAAK,QACLqP,MAAM,QALR,UAOE,sBAAMnP,MAAO,CAAE0T,YAAa,GAAKC,KAAK,MAAM,aAAW,UAAvD,0BAPF,kBAeJ,cAAC,IAAD,CAAKiN,MAAM,SAASC,OAAQ,CAAC,EAAG,GAAhC,SACE,cAAC,IAAD,CAAKjQ,KAAM,GAAX,SAGIuP,EACE,cAACjL,GAAD,CAAQxG,cAAeA,EAAehR,MAAOA,EAAO2B,YAAasP,IAEjE,cC9ZVoJ,I,QAAS,CACbK,KAAK,GAAD,OAAK8G,6BAAL,mBACJ7G,MAAM,GAAD,OAAK6G,6BAAL,sBAGD4B,GAAY/jB,OAAO0P,aAAaC,QAAQ,SAExCqU,GAAc,kEAEdC,GAAS,IAAIC,IAAa,CAC9BpF,IAAKkF,GACLG,MAAO,IAAIC,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBN,OAAQA,GAAxB,SACE,cAAC,IAAD,CAAuBO,SAAUxJ,GAAQyJ,aAAcV,IAAa,QAApE,SACE,cAAC,IAAD,UACE,cAAC,GAAD,CAAKC,YAAaA,WAIxBU,SAASC,eAAe,U,kBCwiC1BC,EAAOC,QAAU,CACf,EAAG,CACD1N,UAAW,CACT2N,IAAK,CACH5iB,QAAS,6CACT6iB,IA72BO,CACb,CACEnQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,WACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,eAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CACEsQ,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,WACNwR,KAAM,SAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CACEsQ,SAAS,EACTF,aAAc,SACdtlB,KAAM,MACNwR,KAAM,UAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,OACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,OACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,QACdtlB,KAAM,OACNwR,KAAM,UAGVxR,KAAM,UACNwR,KAAM,SAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CACEsQ,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACEgU,SAAS,EACTF,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,WACNwR,KAAM,SAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,mBACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,kBACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGVxR,KAAM,YACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,UACN0lB,QAAS,CACP,CACEJ,aAAc,OACdtlB,KAAM,GACNwR,KAAM,SAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGVxR,KAAM,YACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,WACN0lB,QAAS,CACP,CACEJ,aAAc,QACdtlB,KAAM,GACNwR,KAAM,UAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,OACN0lB,QAAS,CACP,CACEJ,aAAc,SACdtlB,KAAM,GACNwR,KAAM,WAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGVxR,KAAM,SACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,SACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,UACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,QACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,SACNwR,KAAM,WAER,CACE8T,aAAc,OACdtlB,KAAM,UACNwR,KAAM,QAER,CACE8T,aAAc,QACdtlB,KAAM,IACNwR,KAAM,SAER,CACE8T,aAAc,UACdtlB,KAAM,IACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,IACNwR,KAAM,YAGVxR,KAAM,SACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,OACN0lB,QAAS,GACTxP,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,SACN0lB,QAAS,CACP,CACEJ,aAAc,SACdtlB,KAAM,GACNwR,KAAM,WAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,cACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,WACN0lB,QAAS,CACP,CACEJ,aAAc,OACdtlB,KAAM,GACNwR,KAAM,SAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,WAER,CACE8T,aAAc,UACdtlB,KAAM,MACNwR,KAAM,YAGVxR,KAAM,eACN0lB,QAAS,CACP,CACEJ,aAAc,OACdtlB,KAAM,GACNwR,KAAM,SAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,UACN0lB,QAAS,CACP,CACEJ,aAAc,SACdtlB,KAAM,GACNwR,KAAM,WAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACEoQ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGVxR,KAAM,QACN0lB,QAAS,CACP,CACEJ,aAAc,UACdtlB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,cA+TJmU,IAAK,CACHnjB,QAAS,6CACT6iB,IA/kCS,CACf,CACEI,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,OACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,WAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACElV,KAAM,WACNwR,KAAM,WAER,CACExR,KAAM,SACNwR,KAAM,YAGVxR,KAAM,UACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,SAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,cACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACElV,KAAM,QACNwR,KAAM,WAER,CACExR,KAAM,MACNwR,KAAM,WAER,CACExR,KAAM,SACNwR,KAAM,YAGVxR,KAAM,eACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,SAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,WACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,UAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACElV,KAAM,SACNwR,KAAM,YAGVxR,KAAM,YACN0lB,QAAS,CACP,CACE1lB,KAAM,UACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,GACRlV,KAAM,SACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,WAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACElV,KAAM,MACNwR,KAAM,WAER,CACExR,KAAM,SACNwR,KAAM,YAGVxR,KAAM,WACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,SAGV0E,SAAS,EACTS,gBAAiB,aACjBnF,KAAM,YAER,CACEiU,UAAU,EACVvQ,OAAQ,CACN,CACElV,KAAM,SACNwR,KAAM,WAER,CACExR,KAAM,WACNwR,KAAM,YAGVxR,KAAM,YACN0lB,QAAS,CACP,CACE1lB,KAAM,GACNwR,KAAM,YAGV0E,SAAS,EACTS,gBAAiB,OACjBnF,KAAM,YAER,CACE0E,SAAS,EACTS,gBAAiB,UACjBnF,KAAM,YAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CACEsQ,SAAS,EACTxlB,KAAM,QACNwR,KAAM,WAER,CACEgU,SAAS,EACTxlB,KAAM,UACNwR,KAAM,WAER,CACEgU,SAAS,EACTxlB,KAAM,QACNwR,KAAM,YAGVxR,KAAM,WACNwR,KAAM,SAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CACEsQ,SAAS,EACTxlB,KAAM,OACNwR,KAAM,WAER,CACEgU,SAAS,EACTxlB,KAAM,KACNwR,KAAM,WAER,CACEgU,SAAS,EACTxlB,KAAM,QACNwR,KAAM,YAGVxR,KAAM,WACNwR,KAAM,aAw3BR,KAAM,CACJiG,UAAW,CACTwH,QAAS,CACPzc,QAAS,6CACT6iB,IArUW,CACjB,CACEnQ,OAAQ,GACRyB,gBAAiB,aACjBnF,KAAM,eAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CAAEsQ,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,WAC/D,CAAEgU,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,WAClE,CAAEgU,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAEnExR,KAAM,WACNwR,KAAM,SAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CAAEsQ,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,WAC/D,CAAEgU,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,WAClE,CAAEgU,SAAS,EAAOF,aAAc,OAAQtlB,KAAM,WAAYwR,KAAM,SAElExR,KAAM,iBACNwR,KAAM,SAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CAAEsQ,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,gBAAiBwR,KAAM,WACvE,CAAEgU,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,YAEpExR,KAAM,uBACNwR,KAAM,SAER,CACE+T,WAAW,EACXrQ,OAAQ,CACN,CAAEsQ,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,OAAQwR,KAAM,WAC9D,CAAEgU,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,KAAMwR,KAAM,WAC5D,CAAEgU,SAAS,EAAMF,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAEnExR,KAAM,WACNwR,KAAM,SAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,KAAMwR,KAAM,WAC7C,CAAE8T,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAEpDxR,KAAM,UACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,YACzDxR,KAAM,YACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,GACRlV,KAAM,UACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,QACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,cACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,WACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,WACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,YACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,YACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,WACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,WACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,YAC5DxR,KAAM,eACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,WAChD,CAAE8T,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,YAErDxR,KAAM,mBACN0lB,QAAS,CAAC,CAAEJ,aAAc,OAAQtlB,KAAM,GAAIwR,KAAM,SAClDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,GACRlV,KAAM,OACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,GACRlV,KAAM,QACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,UACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CAAE0D,OAAQ,GAAIlV,KAAM,oBAAqB0lB,QAAS,GAAI/O,gBAAiB,aAAcnF,KAAM,YAC3F,CACE0D,OAAQ,GACRlV,KAAM,OACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,OAAQwR,KAAM,WAC/C,CAAE8T,aAAc,UAAWtlB,KAAM,KAAMwR,KAAM,WAC7C,CAAE8T,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAEpDxR,KAAM,mBACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,OAAQwR,KAAM,WAC/C,CAAE8T,aAAc,UAAWtlB,KAAM,KAAMwR,KAAM,WAC7C,CAAE8T,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,WAClD,CAAE8T,aAAc,QAAStlB,KAAM,QAASwR,KAAM,UAEhDxR,KAAM,mBACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,WACnD,CAAE8T,aAAc,OAAQtlB,KAAM,WAAYwR,KAAM,SAElDxR,KAAM,oBACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,SAAUtlB,KAAM,QAASwR,KAAM,WACxDxR,KAAM,UACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,WACnD,CAAE8T,aAAc,SAAUtlB,KAAM,aAAcwR,KAAM,WAEtDxR,KAAM,eACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,SAAUtlB,KAAM,cAAewR,KAAM,WAC9DxR,KAAM,0BACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,SAAUtlB,KAAM,WAAYwR,KAAM,WAC3DxR,KAAM,aACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,SAAUtlB,KAAM,cAAewR,KAAM,WAC9DxR,KAAM,oBACN0lB,QAAS,CAAC,CAAEJ,aAAc,OAAQtlB,KAAM,GAAIwR,KAAM,SAClDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,GACRlV,KAAM,SACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,YACzDxR,KAAM,eACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,WAChD,CAAE8T,aAAc,UAAWtlB,KAAM,QAASwR,KAAM,YAElDxR,KAAM,sBACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAC3DxR,KAAM,WACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,GACRlV,KAAM,cACN0lB,QAAS,CAAC,CAAEJ,aAAc,UAAWtlB,KAAM,GAAIwR,KAAM,YACrDmF,gBAAiB,OACjBnF,KAAM,YAER,CACE0D,OAAQ,CACN,CAAEoQ,aAAc,UAAWtlB,KAAM,OAAQwR,KAAM,WAC/C,CAAE8T,aAAc,UAAWtlB,KAAM,KAAMwR,KAAM,WAC7C,CAAE8T,aAAc,UAAWtlB,KAAM,UAAWwR,KAAM,YAEpDxR,KAAM,eACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,CAAC,CAAEoQ,aAAc,UAAWtlB,KAAM,WAAYwR,KAAM,YAC5DxR,KAAM,oBACN0lB,QAAS,GACT/O,gBAAiB,aACjBnF,KAAM,YAER,CACE0D,OAAQ,GACRlV,KAAM,uBACN0lB,QAAS,CAAC,CAAEJ,aAAc,SAAUtlB,KAAM,GAAIwR,KAAM,WACpDmF,gBAAiB,OACjBnF,KAAM,kB","file":"static/js/main.eb8a6b90.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  // add Moonbeam network\n  moonbeam: {\n    name: \"moonbeam\",\n    color: \"#00b0ef\",\n    chainId: 1284,\n    blockExplorer: \"https://moonbeam.moonscan.io/\",\n    rpcUrl: `https://rpc.api.moonbeam.network`,\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/** \n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\",\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport QR from \"qrcode.react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/** \n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {web3Modal && web3Modal.cachedProvider ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n          <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />\n        </>\n      ) : useBurner ? (\n        \"\"\n      ) : isContract ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n        </>\n      ) : (\n        \"\"\n      )}\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\n        <>\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n          <Balance address={address} provider={localProvider} price={price} />\n          <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />\n        </>\n      ) : (\n        <></>\n      )}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport React, { useMemo, useState } from \"react\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} blockExplorer={blockExplorer} />\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n**/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header({ link, title, subTitle }) {\n  return (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader title={title} subTitle={subTitle} style={{ cursor: \"pointer\" }} />\n    </a>\n  );\n}\n\nHeader.defaultProps = {\n  link: \"https://github.com/austintgriffith/scaffold-eth\",\n  // title: \"🏗 scaffold-eth\",\n  title: \"Tai-Shang-DAO-NFT-Manager\",\n  // subTitle: \"forkable Ethereum dev stack focused on fast product iteration\",\n  subTitle: \"tai-shang-dao-nft-manager\",\n};\n","import { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\n\n// added display of 0 if price={price} is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n**/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import { SmileOutlined, ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, List, Dropdown, Menu, notification } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport Address from \"./Address\";\nconst Item = List.Item;\n\nfunction Nft({ nft, blockExplorer, readContracts, writeContracts, tx }) {\n  const badgeNames = [\"noncegeeker\", \"learner\", \"workshoper\", \"partner\", \"buidler\", \"writer\", \"camper\", \"puzzler\"];\n  const [edit, setEdit] = useState(false);\n  const [badges, setBadges] = useState({});\n  const [tokenInfo, setTokenInfo] = useState(\"\");\n  const [curNft, setCurNft] = useState(nft);\n  const [loading, setLoading] = useState(false);\n\n  const parseTokenInfo = tokenInfo_ => {\n    if (!tokenInfo_ || tokenInfo_ === \"\") {\n      setBadges({});\n      return;\n    }\n    var badges_ = {};\n    const tokenInfoArr = tokenInfo_.substr(1, tokenInfo_.length - 2).split(\", \");\n    for (let i = 0; i < tokenInfoArr.length; i++) {\n      var badgeName = tokenInfoArr[i].split(\" * \")[0];\n      if (badgeName[0] === '\"') badgeName = badgeName.substr(1, badgeName.length - 1);\n      if (badgeName[badgeName.length - 1] === '\"') badgeName = badgeName.substr(0, badgeName.length - 1);\n      var badgeCount = \"1\";\n      if (tokenInfoArr[i].split(\" * \").length === 2) {\n        badgeCount = tokenInfoArr[i].split(\" * \")[1];\n      }\n      badges_[badgeName] = badgeCount;\n    }\n    setBadges(badges_);\n  };\n\n  const formatTokenInfo = () => {\n    console.log(\"formatTokenInfo\", badges);\n    var tokenInfo_ = \"[\";\n    for (let badgeName in badges) {\n      if (badges[badgeName] === \"1\") {\n        tokenInfo_ += `\"${badgeName}\", `;\n      } else {\n        tokenInfo_ += `\"${badgeName} * ${badges[badgeName]}\", `;\n      }\n    }\n    if (tokenInfo_.length > 2) tokenInfo_ = tokenInfo_.substr(0, tokenInfo_.length - 2) + \"]\";\n    else tokenInfo_ = \"\";\n    setTokenInfo(tokenInfo_);\n  };\n\n  const handleBadges = () => {\n    console.log(\"handleBadges\", nft, badges, tokenInfo);\n    setEdit(true);\n  };\n\n  const cancelBadges = () => {\n    setEdit(false);\n    setTokenInfo(curNft.tokenInfo);\n    parseTokenInfo(curNft.tokenInfo);\n  };\n\n  const getNft = async () => {\n    if (!curNft) return;\n    let uri = await readContracts.Web3Dev.tokenURI(curNft.tokenId.toString());\n    let nft_ = JSON.parse(atob(uri.split(\",\")[1]));\n    console.log(\"getNft\", curNft, nft_);\n    let tokenInfo_ = await readContracts.Web3Dev.getTokenInfo(curNft.tokenId);\n    setCurNft({ ...curNft, image: nft_.image, tokenInfo: tokenInfo_ });\n  };\n\n  const notify = (message, description, icon) => {\n    notification.open({\n      message: message,\n      description: description,\n      icon: icon,\n    });\n  };\n\n  const confirmBadges = async () => {\n    if (tokenInfo === curNft.tokenInfo) {\n      setEdit(false);\n      return;\n    }\n    console.log(\"confirmBadges\", curNft);\n    setLoading(true);\n    try {\n      const result = tx(writeContracts.Web3Dev.setTokenInfo(curNft.tokenId, tokenInfo), update => {\n        setEdit(false);\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\n          notify(\n            \"Success!\",\n            \"set badges of nft \" + curNft.tokenId.toString() + \" success\",\n            <SmileOutlined style={{ color: \"#108ee9\" }} />,\n          );\n        }\n      });\n      await result;\n    } catch (e) {\n      console.log(\"error: \", e);\n      notify(\n        \"Failed!\",\n        \"set badges of nft \" + curNft.tokenId.toString() + \" failed\",\n        <ExclamationCircleOutlined style={{ color: \"#ee1111\" }} />,\n      );\n    }\n    await getNft(); // refresh nft info\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!nft) return;\n    setCurNft(nft);\n  }, [nft]);\n\n  useEffect(() => {\n    if (!curNft) return;\n    console.log(\"useEffect curNft\", curNft);\n    setTokenInfo(curNft.tokenInfo);\n    parseTokenInfo(curNft.tokenInfo);\n  }, [curNft]);\n\n  const addBadgesMenu = (\n    <Menu>\n      {badgeNames.map((badgeName, i) => {\n        return (\n          <Menu.Item key={badgeName}>\n            <Button\n              type=\"link\"\n              onClick={() => {\n                setBadges(badges => {\n                  if (badgeName in badges) {\n                    let count = parseInt(badges[badgeName]);\n                    count++;\n                    badges[badgeName] = count.toString();\n                  } else {\n                    badges[badgeName] = \"1\";\n                  }\n                  return badges;\n                });\n                formatTokenInfo();\n              }}\n            >\n              {badgeName}\n            </Button>\n          </Menu.Item>\n        );\n      })}\n    </Menu>\n  );\n\n  const removeBadgesMenu = (\n    <Menu>\n      {Object.keys(badges).map((badgeName, i) => {\n        return (\n          <Menu.Item key={badgeName}>\n            <Button\n              type=\"link\"\n              onClick={() => {\n                setBadges(badges => {\n                  let count = parseInt(badges[badgeName]);\n                  count--;\n                  if (count === 0) {\n                    delete badges[badgeName];\n                  } else {\n                    badges[badgeName] = count.toString();\n                  }\n                  return badges;\n                });\n                formatTokenInfo();\n              }}\n            >\n              {badgeName}\n            </Button>\n          </Menu.Item>\n        );\n      })}\n    </Menu>\n  );\n\n  return (\n    <div>\n      <Item>\n        <Item.Meta\n          title={\n            <div>\n              <a href={curNft.description}>{curNft.name + \" owner: \"}</a>\n              <Address value={curNft.owner} blockExplorer={blockExplorer} />\n            </div>\n          }\n          description={loading ? \"loading\" : (<img src={curNft.image} width=\"200\" height=\"200\" onClick={handleBadges} />)}\n        />\n      </Item>\n      <Modal\n        title=\"Badges\"\n        visible={edit}\n        onCancel={cancelBadges}\n        onOk={confirmBadges}\n        destroyOnClose={true}\n        loading={loading}\n      >\n        <Dropdown overlay={addBadgesMenu}>\n          <Button type=\"primary\">Add</Button>\n        </Dropdown>\n        &nbsp;\n        <Dropdown overlay={removeBadgesMenu}>\n          <Button type=\"primary\">Remove</Button>\n        </Dropdown>\n        &nbsp; &nbsp; &nbsp;\n        <span>badges: {tokenInfo}</span>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Nft;\n","import { List } from \"antd\";\nimport { useContractReader } from \"eth-hooks\";\nimport { useEffect, useState } from \"react\";\nimport { Nft } from \"../components\";\n\nfunction Home({ readContracts, writeContracts, tx }) {\n  const totalSupply = useContractReader(readContracts, \"Web3Dev\", \"totalSupply\");\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const blockExplorer = \"https://moonbeam.moonscan.io/\";\n\n  const getNft = async (mintedNfts, i) => {\n    try {\n      let id = await readContracts.Web3Dev.tokenByIndex(i);\n      let owner = await readContracts.Web3Dev.ownerOf(id);\n      let uri = await readContracts.Web3Dev.tokenURI(id);\n      // console.log(uri)//, atob(uri));\n      let nft = JSON.parse(atob(uri.split(\",\")[1]));\n      nft.owner = owner;\n      nft.tokenId = id;\n      let tokenInfo = await readContracts.Web3Dev.getTokenInfo(id);\n      nft.tokenInfo = tokenInfo;\n      // console.log(nft);\n      mintedNfts.push(nft);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // TODO: add a cache to store the chain's nfts, no need to query every refresh\n  // TODO: show 3 nfts each row\n  const getAllMintedNfts = async () => {\n    setLoading(true);\n    let tot = totalSupply.toNumber();\n    var tasks = [];\n    var mintedNfts = [];\n    for (let i = 0; i < tot; i++) {\n      tasks.push(getNft(mintedNfts, i));\n    }\n    await Promise.all(tasks);\n    setNfts(mintedNfts);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!totalSupply || nfts.length > 0) return;\n    getAllMintedNfts();\n  }, [totalSupply]);\n\n  return (\n    <div>\n      <div>\n        Nft Minted: {totalSupply?.toString()}\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={nfts}\n          loading={loading}\n          renderItem={item => (\n            <Nft\n              nft={item}\n              blockExplorer={blockExplorer}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              tx={tx}\n            />\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>⛓️</span>\n        Make sure your local chain is running first:\n        <span className=\"highlight\" style={highlight}>\n          yarn chain\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data, if there is any:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { Input, Button, List, InputNumber } from \"antd\";\nimport { useState } from \"react\";\nimport { Nft } from \"../components\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nfunction Query({ readContracts, blockExplorer, writeContracts, tx }) {\n  const [nfts, setNfts] = useState([]);\n  const [tokenId, setTokenId] = useState(null);\n  const [owner, setOwner] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const queryNftByTokenId = async () => {\n    if (!tokenId) return;\n    setNfts([]);\n    setLoading(true);\n    try {\n      let owner_ = await readContracts.Web3Dev.ownerOf(tokenId);\n      let uri = await readContracts.Web3Dev.tokenURI(tokenId);\n      let nft = JSON.parse(atob(uri.split(\",\")[1]));\n      nft.owner = owner_;\n      nft.tokenId = tokenId;\n      let tokenInfo = await readContracts.Web3Dev.getTokenInfo(tokenId);\n      nft.tokenInfo = tokenInfo;\n      setNfts([nft]);\n    } catch (e) {\n      console.log(e);\n      setNfts([]);\n    }\n    setLoading(false);\n  };\n\n  const queryNftsByOwner = async () => {\n    if (!owner) return;\n    setNfts([]);\n    setLoading(true);\n    var nfts_ = [];\n    try {\n      let balance = await readContracts.Web3Dev.balanceOf(owner);\n      for (let i = 0; i < balance; i++) {\n        // Promise.all?\n        let id = await readContracts.Web3Dev.tokenOfOwnerByIndex(owner, i);\n        let uri = await readContracts.Web3Dev.tokenURI(id);\n        let nft = JSON.parse(atob(uri.split(\",\")[1]));\n        nft.owner = owner;\n        nft.tokenId = id;\n        let tokenInfo = await readContracts.Web3Dev.getTokenInfo(id);\n        nft.tokenInfo = tokenInfo;\n        // setNfts(nfts => [...nfts, nft]);\n        nfts_.push(nft);\n      }\n    } catch (e) {\n      console.log(e);\n      setNfts([]);\n    }\n    setNfts(nfts_);\n    setLoading(false);\n  };\n\n  const handleTokenIdChange = evt => {\n    setTokenId(BigNumber.from(evt));\n  };\n\n  const handleOwnerChange = evt => {\n    setOwner(evt.target.value);\n  };\n\n  return (\n    <div>\n      <InputNumber\n        placeholder=\"input tokenid(uint256)\"\n        onChange={handleTokenIdChange}\n        style={{ margin: \"3ex\", width: \"60%\" }}\n      />\n      <Button type=\"primary\" onClick={() => queryNftByTokenId()}>\n        query\n      </Button>\n      <Input placeholder=\"input owner(address)\" onChange={handleOwnerChange} style={{ margin: \"3ex\", width: \"60%\" }} />\n      <Button type=\"primary\" onClick={() => queryNftsByOwner()}>\n        query\n      </Button>\n      <br />\n      {nfts.length > 0 ? (\n        <div>\n          Nft Queried:\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={nfts}\n            renderItem={item => (\n              <Nft\n                nft={item}\n                blockExplorer={blockExplorer}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                tx={tx}\n              />\n            )}\n          />\n        </div>\n      ) : null}\n      {loading ? <h1>loading...</h1> : null}\n    </div>\n  );\n}\n\nexport default Query;\n","import { Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, Query, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\n// const initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\nconst initialNetwork = NETWORKS.moonbeam; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  // const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"Web3Dev\", \"purpose\");\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n      <Menu style={{ textAlign: \"center\", marginTop: 40 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item key=\"/Tai-Shang-DAO-NFT-Manager/\">\n          <Link to=\"/Tai-Shang-DAO-NFT-Manager/\">App Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/Tai-Shang-DAO-NFT-Manager/query\">\n          <Link to=\"/Tai-Shang-DAO-NFT-Manager/query\">Query Nft</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/Tai-Shang-DAO-NFT-Manager/debug\">\n          <Link to=\"/Tai-Shang-DAO-NFT-Manager/debug\">Debug Contracts</Link>\n        </Menu.Item>\n        {/* <Menu.Item key=\"/hints\">\n          <Link to=\"/hints\">Hints</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/exampleui\">\n          <Link to=\"/exampleui\">ExampleUI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/mainnetdai\">\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/subgraph\">\n          <Link to=\"/subgraph\">Subgraph</Link>\n        </Menu.Item> */}\n      </Menu>\n\n      <Switch>\n        <Route exact path=\"/Tai-Shang-DAO-NFT-Manager/\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <Home readContracts={readContracts} writeContracts={writeContracts} tx={tx} />\n        </Route>\n        <Route exact path=\"/Tai-Shang-DAO-NFT-Manager/query\">\n          <Query readContracts={readContracts} blockExplorer={blockExplorer} writeContracts={writeContracts} tx={tx} />\n        </Route>\n        <Route exact path=\"/Tai-Shang-DAO-NFT-Manager/debug\">\n          <Contract\n            name=\"Web3Dev\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        {/* <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route> */}\n        {/* <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          /> */}\n        {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n          */}\n        {/* </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route> */}\n      </Switch>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\" }}>\n          {USE_NETWORK_SELECTOR && (\n            <div style={{ marginRight: 20 }}>\n              <NetworkSwitch\n                networkOptions={networkOptions}\n                selectedNetwork={selectedNetwork}\n                setSelectedNetwork={setSelectedNetwork}\n              />\n            </div>\n          )}\n          <Account\n            useBurner={USE_BURNER_WALLET}\n            address={address}\n            localProvider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            price={price}\n            web3Modal={web3Modal}\n            loadWeb3Modal={loadWeb3Modal}\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\n            blockExplorer={blockExplorer}\n          />\n        </div>\n        {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n          <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n        )}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst Web3DevABI = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"owner\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"approved\", type: \"address\" },\n      { indexed: true, internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"owner\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"operator\", type: \"address\" },\n      { indexed: false, internalType: \"bool\", name: \"approved\", type: \"bool\" },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"previousOwner\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"newOwner\", type: \"address\" },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: true, internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"baseURL\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getApproved\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getFifth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getFirst\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getFourth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getSecond\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getSixth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getThird\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_tokenId\", type: \"uint256\" }],\n    name: \"getTokenInfo\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"operator\", type: \"address\" },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"ownerOf\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  { inputs: [], name: \"renounceOwnership\", outputs: [], stateMutability: \"nonpayable\", type: \"function\" },\n  {\n    inputs: [],\n    name: \"rule\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"_data\", type: \"bytes\" },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"operator\", type: \"address\" },\n      { internalType: \"bool\", name: \"approved\", type: \"bool\" },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"_rule\", type: \"string\" }],\n    name: \"setRule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_tokenId\", type: \"uint256\" },\n      { internalType: \"string\", name: \"_tokenInfo\", type: \"string\" },\n    ],\n    name: \"setTokenInfo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"_commitHash\", type: \"string\" }],\n    name: \"setWalletDappCommitHash\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"_baseURL\", type: \"string\" }],\n    name: \"setbaseURL\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" }],\n    name: \"supportsInterface\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"index\", type: \"uint256\" }],\n    name: \"tokenByIndex\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"uint256\", name: \"index\", type: \"uint256\" },\n    ],\n    name: \"tokenOfOwnerByIndex\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"tokenURI\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"walletDappCommitHash\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n  1284: {\n    contracts: {\n      Web3Dev: {\n        address: \"0xb6FC950C4bC9D1e4652CbEDaB748E8Cdcfe5655F\",\n        abi: Web3DevABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}